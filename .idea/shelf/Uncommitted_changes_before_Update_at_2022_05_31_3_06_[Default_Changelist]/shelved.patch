Index: Inflearn/inflearn_8-3/inf_08_03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_08_03 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_8-3/inf_08_03.java b/Inflearn/inflearn_8-3/inf_08_03.java
--- a/Inflearn/inflearn_8-3/inf_08_03.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_8-3/inf_08_03.java	(date 1653644216243)
@@ -1,2 +1,39 @@
-package PACKAGE_NAME;public class inf_08_03 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class inf_08_03 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int M = Integer.parseInt(st.nextToken());
+
+        int[][] map = new int[N][2];
+        for (int i = 0; i < N; i++) {
+            st = new StringTokenizer(br.readLine());
+            map[i][0] = Integer.parseInt(st.nextToken());
+            map[i][1] = Integer.parseInt(st.nextToken());
+        }
+
+        System.out.print(solution(M, map));
+    }
+    static int answer = 0;
+    public static int solution(int M, int[][] map) {
+
+        DFS(0, 0, 0, map, M);
+
+        return answer;
+    }
+
+    public static void DFS(int start, int time, int sum, int[][] map, int M) {
+        if (time > M) return ;
+        if (map.length == start) {
+            answer = Math.max(answer, sum);
+        } else {
+            DFS(start + 1, time + map[start][1], sum + map[start][0], map, M);
+            DFS(start + 1, time, sum, map, M);
+        }
+    }
 }
Index: Inflearn/inflearn_8-4/inf_08_04.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_08_04 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_8-4/inf_08_04.java b/Inflearn/inflearn_8-4/inf_08_04.java
--- a/Inflearn/inflearn_8-4/inf_08_04.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_8-4/inf_08_04.java	(date 1653651722094)
@@ -1,2 +1,49 @@
-package PACKAGE_NAME;public class inf_08_04 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class inf_08_04 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int M = Integer.parseInt(st.nextToken());
+
+        for (int[] value : solution(N, M)) {
+            for (int k : value)
+                System.out.print(k + " ");
+            System.out.println();
+        }
+    }
+
+    static int answer[][];
+    static int index = 0;
+
+    public static int[][] solution(int N, int M) {
+        int count = (int) Math.pow(N, M);
+        int[] arr = new int[N];
+        for (int i = 0; i < N; i++)
+            arr[i] = i + 1;
+        answer = new int[count][M];
+        int[] split = new int[M];
+
+        DFS(0, split, arr, N, M);
+
+        return answer;
+    }
+
+    public static void DFS(int start, int[] split, int[] arr, int N, int M) {
+        if (start == M) {
+            for (int i = 0 ; i < split.length ; i++)
+                answer[index][i] = split[i];
+            index++;
+            return;
+        } else {
+            for (int i = 0; i < N; i++) {
+                split[start] = arr[i];
+                DFS(start + 1, split, arr, N, M);
+            }
+        }
+    }
 }
Index: algorithm.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2438\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2439\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2741\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10869\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10430\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2588\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_14681\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2753\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2557\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2739\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10952\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_11022\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_9498\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10998\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10953\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_8393\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10718\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_1330\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2742\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_15552\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_1008\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10951\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_1000\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_10950\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_11021\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/BJ_2884\" isTestSource=\"false\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm.iml b/algorithm.iml
--- a/algorithm.iml	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/algorithm.iml	(date 1653653807339)
@@ -29,6 +29,107 @@
       <sourceFolder url="file://$MODULE_DIR$/BJ_10950" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/BJ_11021" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/BJ_2884" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_10162" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1026" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_10610" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_11053" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_13305" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1541" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1715" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1789" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1874" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1931" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1946" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_2217" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_5585" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/House" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_10809" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_11054" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_11055" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1152" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1157" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1316" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_2675" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_2941" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-6" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-7" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-10" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-11" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-12" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-8" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_1-9" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-6" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-7" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-8" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-9" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-10" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-11" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_2-12" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1094" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_11723" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1504" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1753" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_18352" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_1916" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/BJ/BJ_2098" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_3-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_3-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_3-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_3-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_3-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_3-6" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_4-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_4-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_4-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_4-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_4-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Kakao" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-6" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-7" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_5-8" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-10" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-6" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-7" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-8" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_6-9" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-6" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-7" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-8" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-9" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-10" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-11" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_7-12" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_8-1" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_8-2" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_8-3" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_8-4" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_8-5" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Inflearn/inflearn_8-6" isTestSource="false" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
Index: Inflearn/inflearn_7-8/inf_07_08_Re.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_08_Re {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-8/inf_07_08_Re.java b/Inflearn/inflearn_7-8/inf_07_08_Re.java
--- a/Inflearn/inflearn_7-8/inf_07_08_Re.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-8/inf_07_08_Re.java	(date 1653933866573)
@@ -1,2 +1,50 @@
-package PACKAGE_NAME;public class inf_07_08_Re {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.LinkedList;
+import java.util.Queue;
+import java.util.StringTokenizer;
+
+public class inf_07_08_Re {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+
+        int S = Integer.parseInt(st.nextToken());
+        int E = Integer.parseInt(st.nextToken());
+
+        System.out.print(solution(S, E));
+    }
+
+    public static int solution(int S, int E) {
+        int count = 0;
+        Queue<Integer> queue = new LinkedList<>();
+        queue.add(S);
+        boolean[] check = new boolean[10001];
+        boolean flag = false;
+
+        while (!queue.isEmpty()) {
+            int len = queue.size();
+            for (int i = 0 ; i < len ; i++) {
+                int value = queue.poll();
+                if (!check[value]) {
+                    if (value == E) {
+                        flag = true;
+                        break;
+                    }
+
+                    if (value > E) {
+                        queue.add(value - 1);
+                    } else {
+                        queue.add(value + 1);
+                        queue.add(value + 5);
+                    }
+                    check[value] = true;
+                }
+            }
+            if (flag) break;
+            count++;
+        }
+        return count;
+    }
 }
Index: Inflearn/inflearn_7-12/inf_07_12.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_12 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-12/inf_07_12.java b/Inflearn/inflearn_7-12/inf_07_12.java
--- a/Inflearn/inflearn_7-12/inf_07_12.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-12/inf_07_12.java	(date 1653633338365)
@@ -1,2 +1,84 @@
-package PACKAGE_NAME;public class inf_07_12 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.LinkedList;
+import java.util.Queue;
+import java.util.StringTokenizer;
+
+public class inf_07_12 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int M = Integer.parseInt(st.nextToken());
+
+        ArrayList<ArrayList<Integer>> maps = new ArrayList<>();
+//        int[][] maps = new int[N + 1][N + 1];
+
+        for (int i = 0; i <= N; i++)
+            maps.add(new ArrayList<>());
+
+        for (int i = 0; i < M; i++) {
+            st = new StringTokenizer(br.readLine());
+            int num1 = Integer.parseInt(st.nextToken());
+            int num2 = Integer.parseInt(st.nextToken());
+//            maps[num1][num2] = 1;
+            maps.get(num1).add(num2);
+        }
+
+        int[] answer = BFSArrayList(maps, 1, N);
+//        int[] answer = BFS(maps, 1, N);
+        for (int i = 2; i < answer.length; i++)
+            System.out.println(i + " : " + answer[i]);
+    }
+
+    public static int[] BFSArrayList(ArrayList<ArrayList<Integer>> lists, int start, int N) {
+        Queue<Integer> queue = new LinkedList<>();
+        queue.add(start);
+        int[] dist = new int[N + 1];
+        int[] check = new int[N + 1];
+
+        dist[start] = 0;
+        check[start] = 1;
+
+        while (!queue.isEmpty()) {
+            int data = queue.poll();
+            for (int num : lists.get(data)) {
+                if (check[num] == 0) {
+                    dist[num] = dist[data] + 1;
+                    check[num] = 1;
+                    queue.add(num);
+                }
+            }
+        }
+        return dist;
+    }
+
+    public static int[] BFS(int[][] map, int start, int N) {
+        int[] check = new int[N + 1], level = new int[N + 1];
+        int levelNum = 0;
+
+        Queue<Integer> queue = new LinkedList<>();
+        queue.add(start);
+        check[start] = 1;
+
+        while (!queue.isEmpty()) {
+            int size = queue.size();
+            for (int i = 0; i < size; i++) {
+                int value = queue.poll();
+                level[value] = levelNum;
+                for (int j = 1; j <= N; j++) {
+                    if (check[j] == 0 && map[value][j] == 1) {
+                        check[j] = 1;
+                        queue.add(j);
+                    }
+                }
+            }
+            levelNum++;
+        }
+
+        return level;
+    }
+
 }
Index: Inflearn/inflearn_8-1/inf_08_01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_08_01 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_8-1/inf_08_01.java b/Inflearn/inflearn_8-1/inf_08_01.java
--- a/Inflearn/inflearn_8-1/inf_08_01.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_8-1/inf_08_01.java	(date 1653639737422)
@@ -1,2 +1,40 @@
-package PACKAGE_NAME;public class inf_08_01 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.StringTokenizer;
+
+public class inf_08_01 {
+    static String answer = "NO";
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        int[] arr = new int[N];
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+
+        System.out.println(solution(arr));
+    }
+
+    public static String solution(int[] arr) {
+        int arrSum = Arrays.stream(arr).sum();
+
+        if (arrSum % 2 != 0)
+            return answer;
+
+        DFS(0, arrSum / 2, arr, 0);
+        return answer;
+    }
+
+    public static void DFS(int start, int value, int[] arr, int sum) {
+        if (start == arr.length) {
+            if (sum == value)
+                answer = "YES";
+        } else {
+            DFS(start + 1, value, arr, sum + arr[start]);
+            DFS(start + 1, value, arr, sum);
+        }
+    }
 }
Index: Inflearn/inflearn_8-2/inf_08_02.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_08_02 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_8-2/inf_08_02.java b/Inflearn/inflearn_8-2/inf_08_02.java
--- a/Inflearn/inflearn_8-2/inf_08_02.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_8-2/inf_08_02.java	(date 1653643422348)
@@ -1,2 +1,37 @@
-package PACKAGE_NAME;public class inf_08_02 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.StringTokenizer;
+
+public class inf_08_02 {
+    static int answer = 0;
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int C = Integer.parseInt(st.nextToken());
+        int N = Integer.parseInt(st.nextToken());
+
+        int[] arr = new int[N];
+        for (int i = 0 ; i < N ; i++)
+            arr[i] = Integer.parseInt(br.readLine());
+
+        System.out.print(solution(C, arr));
+    }
+
+    public static int solution(int C, int[] arr) {
+        Arrays.sort(arr);
+        DFS(C, arr, 0, 0);
+        return answer;
+    }
+
+    public static void DFS(int C, int[] arr, int sum, int start) {
+        if (sum > C) return;
+        if (arr.length == start) {
+            answer = Math.max(sum, answer);
+        } else {
+            DFS(C, arr, sum + arr[start], start + 1);
+            DFS(C, arr, sum, start + 1);
+        }
+    }
 }
Index: Inflearn/inflearn_4-4/inf_04_04.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_04_04 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-4/inf_04_04.java b/Inflearn/inflearn_4-4/inf_04_04.java
--- a/Inflearn/inflearn_4-4/inf_04_04.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-4/inf_04_04.java	(date 1652085576153)
@@ -1,2 +1,39 @@
-package PACKAGE_NAME;public class inf_04_04 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+
+public class inf_04_04 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String S = br.readLine();
+        String T = br.readLine();
+
+        System.out.print(solution(S, T));
+    }
+
+    public static int solution(String S, String T) {
+        int answer = 0, rt = 0, lt = 0, len = T.length();
+        HashMap<Character, Integer> map1 = new HashMap<>();
+        HashMap<Character, Integer> map2 = new HashMap<>();
+
+        for (char c : T.toCharArray())
+            map1.put(c, map1.getOrDefault(c, 0) + 1);
+
+        while (rt < S.length()) {
+            map2.put(S.charAt(rt), map2.getOrDefault(S.charAt(rt), 0) + 1);
+            rt++;
+            if (rt == len) {
+                answer += map1.equals(map2) ? 1 : 0;
+                if (map2.get(S.charAt(lt)) == 1)
+                    map2.remove(S.charAt(lt));
+                else
+                    map2.put(S.charAt(lt), map2.get(S.charAt(lt)) - 1);
+                lt++;
+                len++;
+            }
+        }
+
+        return answer;
+    }
 }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/.idea/misc.xml	(date 1649580735679)
@@ -3,4 +3,7 @@
   <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
+  <component name="ProjectType">
+    <option name="id" value="jpab" />
+  </component>
 </project>
\ No newline at end of file
Index: Inflearn/inflearn_7-1/inf_07_01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_01 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-1/inf_07_01.java b/Inflearn/inflearn_7-1/inf_07_01.java
--- a/Inflearn/inflearn_7-1/inf_07_01.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-1/inf_07_01.java	(date 1652787210258)
@@ -1,2 +1,30 @@
-package PACKAGE_NAME;public class inf_07_01 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+public class inf_07_01 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        for (int number : solution(N))
+            System.out.print(number + " ");
+    }
+
+    public static int[] solution(int N) {
+        List<Integer> list = new ArrayList<>();
+
+        list = recursive(1, N, list);
+
+        return list.stream().mapToInt(Integer::intValue).toArray();
+    }
+
+    public static List<Integer> recursive(int start, int N, List<Integer> list) {
+        if (start > N) return list;
+
+        list.add(start);
+        return recursive(start + 1, N, list);
+    }
 }
Index: Inflearn/inflearn_4-1/inf_04_01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_04_01 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-1/inf_04_01.java b/Inflearn/inflearn_4-1/inf_04_01.java
--- a/Inflearn/inflearn_4-1/inf_04_01.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-1/inf_04_01.java	(date 1652078524470)
@@ -1,2 +1,40 @@
-package PACKAGE_NAME;public class inf_04_01 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+
+public class inf_04_01 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        char[] votes = br.readLine().toCharArray();
+        int[] result = new int[5];
+        HashMap<Character, Integer> map = new HashMap<>();
+        int max = 0;
+
+        for (char vote : votes) {
+//            int idx = vote - 'A';
+            if (map.get(vote) != null)
+                map.put(vote, map.get(vote) + 1);
+            else
+                map.put(vote, 1);
+//            result[idx] += 1;
+//            max = Math.max(max, result[idx]);
+            max = Math.max(max, map.get(vote));
+        }
+
+        for (char c : map.keySet()) {
+            if (map.get(c) == max) {
+                System.out.println(c);
+                break;
+            }
+        }
+
+
+//        for (int i = 0; i < result.length; i++)
+//            if (result[i] == max) {
+//                System.out.println((char) ('A' + i));
+//                break;
+//            }
+    }
 }
Index: Inflearn/inflearn_2-12/inf_2_12.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\nimport java.lang.*;\n\npublic class inf_2_12 {\n\tpublic Integer solution(int[][] inputs, int counts, int award) {\n\t\tint answer = 0;\n\t\tint[] student = new int[counts]\n\n\t\tfor (int i = 0 ; i < counts ; i++) {\n\t\t\tfor (int j = 0 ; j < award; j++) {\n\t\t\t\t // 안에 있는 학생이 i 등\n\t\t\t\tfor (int k = \n\t\t\t\t\n\t\t\t\t\t\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tinf_2_12 inf = new inf_2_12();\n\t\tScanner scan = new Scanner(System.in);\n\t\tint award = scan.nextInt(); // 안에 데이터 : 학생 이름\n\t\tint counts = scan.nextInt();\n\t\tint[][] inputs = new int[counts][award];\n\n\t\tfor (int i = 0 ; i < counts ; i++) {\n\t\t\tfor (int j = 0 ; j < award ; j++)\n\t\t\t\tinputs[i][j] = scan.nextInt();\n\t\t}\n\n\t\tSystem.out.print(inf.solution(inputs, counts, award));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_2-12/inf_2_12.java b/Inflearn/inflearn_2-12/inf_2_12.java
--- a/Inflearn/inflearn_2-12/inf_2_12.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_2-12/inf_2_12.java	(date 1650259030489)
@@ -1,34 +1,34 @@
-import java.util.*;
-import java.lang.*;
-
-public class inf_2_12 {
-	public Integer solution(int[][] inputs, int counts, int award) {
-		int answer = 0;
-		int[] student = new int[counts]
-
-		for (int i = 0 ; i < counts ; i++) {
-			for (int j = 0 ; j < award; j++) {
-				 // 안에 있는 학생이 i 등
-				for (int k = 
-				
-					
-		}
-
-		return answer;
-	}
-
-	public static void main(String[] args) {
-		inf_2_12 inf = new inf_2_12();
-		Scanner scan = new Scanner(System.in);
-		int award = scan.nextInt(); // 안에 데이터 : 학생 이름
-		int counts = scan.nextInt();
-		int[][] inputs = new int[counts][award];
-
-		for (int i = 0 ; i < counts ; i++) {
-			for (int j = 0 ; j < award ; j++)
-				inputs[i][j] = scan.nextInt();
-		}
-
-		System.out.print(inf.solution(inputs, counts, award));
-	}
-}
+//import java.util.*;
+//import java.lang.*;
+//
+//public class inf_2_12 {
+//	public Integer solution(int[][] inputs, int counts, int award) {
+//		int answer = 0;
+//		int[] student = new int[counts];
+//
+//		for (int i = 0 ; i < counts ; i++) {
+//			for (int j = 0 ; j < award; j++) {
+//				 // 안에 있는 학생이 i 등
+//				for (int k =
+//
+//
+//		}
+//
+//		return answer;
+//	}
+//
+//	public static void main(String[] args) {
+//		inf_2_12 inf = new inf_2_12();
+//		Scanner scan = new Scanner(System.in);
+//		int award = scan.nextInt(); // 안에 데이터 : 학생 이름
+//		int counts = scan.nextInt();
+//		int[][] inputs = new int[counts][award];
+//
+//		for (int i = 0 ; i < counts ; i++) {
+//			for (int j = 0 ; j < award ; j++)
+//				inputs[i][j] = scan.nextInt();
+//		}
+//
+//		System.out.print(inf.solution(inputs, counts, award));
+//	}
+//}
Index: Inflearn/inflearn_6-1/inf_06_01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_06_01 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-1/inf_06_01.java b/Inflearn/inflearn_6-1/inf_06_01.java
--- a/Inflearn/inflearn_6-1/inf_06_01.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-1/inf_06_01.java	(date 1652682543721)
@@ -1,2 +1,34 @@
-package PACKAGE_NAME;public class inf_06_01 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class inf_06_01 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int[] arr = new int[N];
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+
+        for (int k : solution(N, arr))
+            System.out.print(k + " ");
+    }
+
+    public static int[] solution(int N, int[] arr) {
+
+        for (int i = 0; i < N - 1; i++) {
+            int minIndex = i;
+            for (int j = i + 1; j < N; j++) {
+                if (arr[minIndex] > arr[j]) minIndex = j;
+            }
+            int tmp = arr[minIndex];
+            arr[minIndex] = arr[i];
+            arr[i] = tmp;
+        }
+
+        return arr;
+    }
 }
Index: Inflearn/inflearn_5-6/inf_05_06.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_05_06 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-6/inf_05_06.java b/Inflearn/inflearn_5-6/inf_05_06.java
--- a/Inflearn/inflearn_5-6/inf_05_06.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-6/inf_05_06.java	(date 1652322451975)
@@ -1,2 +1,35 @@
-package PACKAGE_NAME;public class inf_05_06 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.LinkedList;
+import java.util.Queue;
+import java.util.StringTokenizer;
+
+public class inf_05_06 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int K = Integer.parseInt(st.nextToken());
+
+        System.out.print(solution(N, K));
+    }
+
+    public static int solution(int N, int K) {
+        int answer = 0;
+        Queue<Integer> queue = new LinkedList<>();
+
+        for (int i = 0; i < N; i++)
+            queue.add(i + 1);
+
+        while (queue.size() > 1) {
+            for (int i = 1; i < K; i++)
+                queue.add(queue.poll());
+            queue.poll();
+        }
+
+        answer = queue.poll();
+
+        return answer;
+    }
 }
Index: BJ/BJ_1026/BJ_1026.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1026 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1026/BJ_1026.java b/BJ/BJ_1026/BJ_1026.java
--- a/BJ/BJ_1026/BJ_1026.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1026/BJ_1026.java	(date 1649226203995)
@@ -1,2 +1,33 @@
-package PACKAGE_NAME;public class BJ_1026 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.StringTokenizer;
+
+public class BJ_1026 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        int[] A = new int[N];
+        Integer[] B = new Integer[N];
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            A[i] = Integer.parseInt(st.nextToken());
+
+        StringTokenizer st1 = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            B[i] = Integer.parseInt(st1.nextToken());
+
+        Arrays.sort(A); // 오름차순
+        Arrays.sort(B, Comparator.reverseOrder()); // 내림차순
+
+        int sum = 0;
+        for (int i = 0; i < N; i++)
+            sum += (A[i] * B[i]);
+
+        System.out.println(sum);
+    }
 }
Index: Inflearn/inflearn_5-7/inf_05_07.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_05_07 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-7/inf_05_07.java b/Inflearn/inflearn_5-7/inf_05_07.java
--- a/Inflearn/inflearn_5-7/inf_05_07.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-7/inf_05_07.java	(date 1652326901903)
@@ -1,2 +1,35 @@
-package PACKAGE_NAME;public class inf_05_07 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class inf_05_07 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String essential = br.readLine();
+        String schedule = br.readLine();
+
+        System.out.print(solution(essential, schedule));
+    }
+
+    public static String solution(String essential, String schedule) {
+        String answer = "YES";
+        int idx = -1;
+
+        for (char essentialSubject : essential.toCharArray()) {
+
+            if (!schedule.contains(essentialSubject + "")) return "NO";
+
+            for (int i = 0; i < schedule.length(); i++) {
+                if (essentialSubject == schedule.charAt(i)) {
+                    if (idx < i)
+                        idx = i;
+                    else
+                        return "NO";
+                    break;
+                }
+            }
+        }
+
+        return answer;
+    }
 }
Index: BJ/BJ_1541/BJ_1541.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1541 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1541/BJ_1541.java b/BJ/BJ_1541/BJ_1541.java
--- a/BJ/BJ_1541/BJ_1541.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1541/BJ_1541.java	(date 1649228167194)
@@ -1,2 +1,23 @@
-package PACKAGE_NAME;public class BJ_1541 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_1541 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String[] arr = br.readLine().split("-");
+        int min = 0;
+
+        for (int i = 0; i < arr.length; i++) {
+            String[] split = arr[i].split("\\+");
+            int sum = 0;
+
+            for (int j = 0; j < split.length; j++)
+                sum += Integer.parseInt(split[j]);
+
+            if (i == 0) min = sum;
+            else min -= sum;
+        }
+        System.out.println(min);
+    }
 }
Index: Inflearn/inflearn_6-10/inf_06_10.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_06_10 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-10/inf_06_10.java b/Inflearn/inflearn_6-10/inf_06_10.java
--- a/Inflearn/inflearn_6-10/inf_06_10.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-10/inf_06_10.java	(date 1652780547665)
@@ -1,2 +1,52 @@
-package PACKAGE_NAME;public class inf_06_10 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.StringTokenizer;
+
+public class inf_06_10 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int C = Integer.parseInt(st.nextToken());
+
+        int[] arr = new int[N];
+        st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+
+        System.out.print(solution(C, arr));
+    }
+
+    public static int solution(int C, int[] arr) {
+        int answer = 0, min = Arrays.stream(arr).min().getAsInt(), max = Arrays.stream(arr).max().getAsInt();
+
+        Arrays.sort(arr);
+
+        while (min <= max) {
+            int mid = (max + min) / 2;
+
+            if (check(mid, arr) >= C) {
+                answer = mid;
+                min = mid + 1;
+            }
+            else max = mid - 1;
+        }
+
+        return answer;
+    }
+
+    public static int check(int mid, int[] arr) {
+        int count = 1, position = Arrays.stream(arr).min().getAsInt();
+
+        for (int number : arr) {
+            if ((number - position) >= mid) {
+                position = number;
+                count++;
+            }
+        }
+
+        return count;
+    }
 }
Index: Inflearn/inflearn_4-5/inf_04_05.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_04_05 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-5/inf_04_05.java b/Inflearn/inflearn_4-5/inf_04_05.java
--- a/Inflearn/inflearn_4-5/inf_04_05.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-5/inf_04_05.java	(date 1652104112492)
@@ -1,2 +1,40 @@
-package PACKAGE_NAME;public class inf_04_05 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.*;
+
+public class inf_04_05 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int K = Integer.parseInt(st.nextToken());
+
+        st = new StringTokenizer(br.readLine());
+        int[] arr = new int[N];
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+
+        System.out.print(solution(N, K, arr));
+    }
+
+    public static int solution(int N, int K, int[] scores) {
+        Set<Integer> set = new HashSet<>();
+
+        for (int i = 0; i < N; i++) {
+            for (int j = i + 1; j < N; j++) {
+                for (int k = j + 1; k < N; k++) {
+                    set.add(scores[i] + scores[j] + scores[k]);
+                }
+            }
+        }
+
+        List<Integer> list = new ArrayList(set);
+        Collections.sort(list, Collections.reverseOrder());
+
+        if (list.size() < K)
+            return -1;
+
+        return list.get(K-1).intValue();
+    }
 }
Index: Inflearn/inflearn_4-2/inf_04_02.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_04_02 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-2/inf_04_02.java b/Inflearn/inflearn_4-2/inf_04_02.java
--- a/Inflearn/inflearn_4-2/inf_04_02.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-2/inf_04_02.java	(date 1652079880347)
@@ -1,2 +1,35 @@
-package PACKAGE_NAME;public class inf_04_02 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+
+public class inf_04_02 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String str1 = br.readLine();
+        String str2 = br.readLine();
+
+        System.out.println(solution(str1, str2));
+    }
+
+    public static String solution(String str1, String str2) {
+        HashMap<Character, Integer> map1 = new HashMap<>();
+        String answer = "YES";
+
+        for (char c : str1.toCharArray()) {
+            if (map1.get(c) == null)
+                map1.put(c, 1);
+            else
+                map1.put(c, map1.get(c) + 1);
+        }
+
+        for (char c: str2.toCharArray()) {
+            if (map1.get(c) == null || map1.get(c) == 0) {
+                answer = "NO";
+                break;
+            }
+            map1.put(c, map1.get(c) - 1);
+        }
+        return answer;
+    }
 }
Index: BJ/BJ_1931/BJ_1931.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1931 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1931/BJ_1931.java b/BJ/BJ_1931/BJ_1931.java
--- a/BJ/BJ_1931/BJ_1931.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1931/BJ_1931.java	(date 1649160646401)
@@ -1,2 +1,40 @@
-package PACKAGE_NAME;public class BJ_1931 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.StringTokenizer;
+
+public class BJ_1931 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[][] arr = new int[N][2];
+
+        for (int i = 0; i < N; i++) {
+            StringTokenizer st = new StringTokenizer(br.readLine());
+            arr[i][0] = Integer.parseInt(st.nextToken());
+            arr[i][1] = Integer.parseInt(st.nextToken());
+        }
+
+        Arrays.sort(arr, new Comparator<int[]>() {
+            @Override
+            public int compare(int[] o1, int[] o2) { // o1 : 자기 자신, o2 : 비교 대상
+                if (o1[1] == o2[1]) // 정렬 할 대상이 같은 값이면, 다음 비교 대상을 통해 오름차순으로 정렬합니다.
+                    return o1[0] - o2[0];
+                return o1[1] - o2[1];
+            }
+        });
+
+        int cnt = 0, prev_end_time = 0;
+
+        for (int i = 0 ; i < N ; i++) {
+            if (prev_end_time <= arr[i][0]) { // 시작 시간이 이전의 끝나는 시간과 같거나 크다면,
+                prev_end_time = arr[i][1]; // 끝나는 시간의 값을 변경해주고 cnt 를 해줍니다.
+                cnt++;
+            }
+        }
+
+        System.out.println(cnt);
+    }
 }
Index: BJ/BJ_2217/BJ_2217.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_2217 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_2217/BJ_2217.java b/BJ/BJ_2217/BJ_2217.java
--- a/BJ/BJ_2217/BJ_2217.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_2217/BJ_2217.java	(date 1649234744546)
@@ -1,2 +1,23 @@
-package PACKAGE_NAME;public class BJ_2217 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.Comparator;
+
+public class BJ_2217 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine()); // 로프의 개수
+
+        Integer[] rope = new Integer[N];
+        for (int i = 0; i < N; i++)
+            rope[i] = Integer.parseInt(br.readLine()); // 각 로프의 중량 값
+
+        Arrays.sort(rope, Comparator.reverseOrder()); // 내림차순으로 변경
+        int max = -1;
+        for (int i = 0; i < N; i++)
+            max = Math.max(max, rope[i] * (i + 1));
+
+        System.out.println(max);
+    }
 }
Index: BJ/BJ_10162/BJ_10162.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_10162 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_10162/BJ_10162.java b/BJ/BJ_10162/BJ_10162.java
--- a/BJ/BJ_10162/BJ_10162.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_10162/BJ_10162.java	(date 1649235270313)
@@ -1,2 +1,25 @@
-package PACKAGE_NAME;public class BJ_10162 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_10162 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int T = Integer.parseInt(br.readLine());
+        int[] arr = {300, 60, 10};
+
+        int[] value = new int[3];
+        for (int i = 0; i < arr.length; i++) {
+            value[i] = (T / arr[i]);
+            T -= (arr[i] * (T / arr[i]));
+        }
+
+        if (T != 0) {
+            System.out.println(-1);
+            return;
+        }
+
+        for (int k : value)
+            System.out.print(k + " ");
+    }
 }
Index: Inflearn/inflearn_6-7/inf_06_07.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_06_07 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-7/inf_06_07.java b/Inflearn/inflearn_6-7/inf_06_07.java
--- a/Inflearn/inflearn_6-7/inf_06_07.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-7/inf_06_07.java	(date 1652703797441)
@@ -1,2 +1,38 @@
-package PACKAGE_NAME;public class inf_06_07 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.StringTokenizer;
+
+public class inf_06_07 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[][] map = new int[N][2];
+
+        for (int i = 0 ; i < N ; i++) {
+            StringTokenizer st = new StringTokenizer(br.readLine());
+            map[i][0] = Integer.parseInt(st.nextToken());
+            map[i][1] = Integer.parseInt(st.nextToken());
+        }
+
+        for (int[] value : solution(map))
+            System.out.print(value[0] + " " + value[1] + "\n");
+    }
+
+    public static int[][] solution(int[][] map) {
+
+        Arrays.sort(map, new Comparator<int[]>() {
+            @Override
+            public int compare(int[] o1, int[] o2) {
+                if (o1[0] - o2[0] != 0)
+                    return o1[0] - o2[0];
+                else
+                    return o1[1] - o2[1];
+            }
+        });
+
+        return map;
+    }
 }
Index: BJ/BJ_5585/BJ_5585.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_5585 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_5585/BJ_5585.java b/BJ/BJ_5585/BJ_5585.java
--- a/BJ/BJ_5585/BJ_5585.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_5585/BJ_5585.java	(date 1649228826389)
@@ -1,2 +1,20 @@
-package PACKAGE_NAME;public class BJ_5585 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_5585 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int pay = Integer.parseInt(br.readLine()); // 지불해야할 값
+        int num = 1000 - pay; // 거슬러줘야하는 값
+        int[] arr = {500, 100, 50 ,10, 5 ,1}; // 거스름 돈의 종류
+
+        int cnt = 0; // 거슬러줄 동전의 개수
+        for (int i = 0 ; i < arr.length ; i++) {
+            cnt += num / arr[i];
+            num %= arr[i];
+        }
+
+        System.out.println(cnt);
+    }
 }
Index: Inflearn/inflearn_5-5/inf_05_05.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_05_05 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-5/inf_05_05.java b/Inflearn/inflearn_5-5/inf_05_05.java
--- a/Inflearn/inflearn_5-5/inf_05_05.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-5/inf_05_05.java	(date 1652321363053)
@@ -1,2 +1,33 @@
-package PACKAGE_NAME;public class inf_05_05 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Stack;
+
+public class inf_05_05 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String str = br.readLine();
+
+        System.out.print(solution(str));
+    }
+
+    public static int solution(String s) {
+        int answer = 0;
+        Stack<Character> stack = new Stack<>();
+
+        for (int i = 0; i < s.length(); i++) {
+            if (s.charAt(i) == '(') stack.push('(');
+            else if (s.charAt(i) == ')') {
+                if (s.charAt(i - 1) == '(') {
+                    stack.pop();
+                    answer += stack.size();
+                } else {
+                    stack.pop();
+                    answer += 1;
+                }
+            }
+        }
+
+        return answer;
+    }
 }
Index: Inflearn/inflearn_7-7/inf_07_07.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_07 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-7/inf_07_07.java b/Inflearn/inflearn_7-7/inf_07_07.java
--- a/Inflearn/inflearn_7-7/inf_07_07.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-7/inf_07_07.java	(date 1652872507430)
@@ -1,2 +1,87 @@
-package PACKAGE_NAME;public class inf_07_07 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.*;
+
+class inf_07_07_Node {
+    int node;
+    inf_07_07_Node left, right;
+
+    inf_07_07_Node(int node) {
+        this.node = node;
+    }
+}
+
+class inf_07_07_TreeNode {
+    inf_07_07_Node tree;
+
+    public void initialTree(int root, int left, int right) {
+        if (tree == null) {
+            if (root != -1)
+                tree = new inf_07_07_Node(root);
+            if (left != -1)
+                tree.left = new inf_07_07_Node(left);
+            if (right != -1)
+                tree.right = new inf_07_07_Node(right);
+        } else {
+            searchTree(tree, root, left, right);
+        }
+    }
+
+    public void searchTree(inf_07_07_Node node, int root, int left, int right) {
+        if (node == null) return;
+        if (node.node == root) {
+            if (left != -1)
+                node.left = new inf_07_07_Node(left);
+            if (right != -1)
+                node.right = new inf_07_07_Node(right);
+        } else {
+            searchTree(node.left, root, left, right);
+            searchTree(node.right, root, left, right);
+        }
+    }
+
+    public List<Integer> levelTree(inf_07_07_Node node, List<Integer> list){
+        Queue<inf_07_07_Node> queue = new LinkedList<>();
+        queue.add(node);
+
+        while (!queue.isEmpty()) {
+            inf_07_07_Node now = queue.poll();
+
+            if (now != null) {
+                list.add(now.node);
+                queue.add(now.left);
+                queue.add(now.right);
+            }
+        }
+        return list;
+    }
+}
+
+public class inf_07_07 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[][] map = new int[N][3];
+        for (int i = 0; i < N; i++) {
+            StringTokenizer st = new StringTokenizer(br.readLine());
+            map[i][0] = Integer.parseInt(st.nextToken());
+            map[i][1] = Integer.parseInt(st.nextToken());
+            map[i][2] = Integer.parseInt(st.nextToken());
+        }
+
+        for (int number : solution(N, map))
+            System.out.print(number + " ");
+    }
+
+    public static int[] solution(int N, int[][] maps) {
+        List<Integer> list = new ArrayList<>();
+        inf_07_07_TreeNode tree = new inf_07_07_TreeNode();
+
+        for (int[] map : maps)
+            tree.initialTree(map[0], map[1], map[2]);
+
+        list = tree.levelTree(tree.tree, list);
+        return list.stream().mapToInt(Integer::intValue).toArray();
+    }
 }
Index: Inflearn/inflearn_5-2/inf_05_02.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_05_02 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-2/inf_05_02.java b/Inflearn/inflearn_5-2/inf_05_02.java
--- a/Inflearn/inflearn_5-2/inf_05_02.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-2/inf_05_02.java	(date 1652107490764)
@@ -1,2 +1,39 @@
-package PACKAGE_NAME;public class inf_05_02 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Stack;
+
+public class inf_05_02 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String str = br.readLine();
+
+        System.out.print(solution(str));
+    }
+
+    public static String solution(String str) {
+        String answer = "";
+        Stack<Character> stack = new Stack<>();
+
+        for (char c : str.toCharArray()) {
+            switch (c) {
+                case ')':
+                    while (true) {
+                        if (stack.isEmpty()) break;
+                        char check = stack.pop();
+                        if (check == '(')
+                            break;
+                    }
+                    break;
+                default:
+                    stack.push(c);
+                    break;
+            }
+        }
+
+        for (int i = 0 ; i < stack.size() ; i++)
+            answer += stack.get(i);
+
+        return answer;
+    }
 }
Index: BJ/BJ_2675/BJ_2675.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_2675 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_2675/BJ_2675.java b/BJ/BJ_2675/BJ_2675.java
--- a/BJ/BJ_2675/BJ_2675.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_2675/BJ_2675.java	(date 1649929320120)
@@ -1,2 +1,24 @@
-package PACKAGE_NAME;public class BJ_2675 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class BJ_2675 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int T = Integer.parseInt(br.readLine());
+        StringBuilder sb = new StringBuilder();
+
+        for (int i = 0; i < T; i++) {
+            StringTokenizer st = new StringTokenizer(br.readLine());
+            int R = Integer.parseInt(st.nextToken());
+            char[] split = st.nextToken().toCharArray();
+
+            for (int j = 0; j < split.length; j++)
+                for (int k = 0 ; k < R ; k++)
+                    sb.append(split[j]);
+            sb.append("\n");
+        }
+        System.out.println(sb);
+    }
 }
Index: Inflearn/inflearn_5-3/inf_05_03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_05_03 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-3/inf_05_03.java b/Inflearn/inflearn_5-3/inf_05_03.java
--- a/Inflearn/inflearn_5-3/inf_05_03.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-3/inf_05_03.java	(date 1652284020740)
@@ -1,2 +1,55 @@
-package PACKAGE_NAME;public class inf_05_03 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Stack;
+import java.util.StringTokenizer;
+
+public class inf_05_03 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[][] map = new int[N][N];
+
+        for (int i = 0; i < N; i++) {
+            StringTokenizer st = new StringTokenizer(br.readLine());
+            for (int j = 0; j < N; j++)
+                map[i][j] = Integer.parseInt(st.nextToken());
+        }
+
+        int board = Integer.parseInt(br.readLine());
+        int[] moves = new int[board];
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < board; i++)
+            moves[i] = Integer.parseInt(st.nextToken());
+
+        System.out.print(solution(N, map, board, moves));
+    }
+
+    public static int solution(int N, int[][] map, int board, int[] moves) {
+        int answer = 0;
+        Stack<Integer> stack = new Stack<>();
+
+        for (int move : moves) {
+            int target = 0;
+            for (int i = 0; i < N; i++) {
+                if (map[i][move - 1] != 0) {
+                    target = map[i][move - 1];
+                    map[i][move - 1] = 0;
+                    break;
+                }
+            }
+            if (!stack.isEmpty()) {
+                if (stack.peek() == target) {
+                    stack.pop();
+                    answer += 2;
+                } else
+                    stack.push(target);
+            } else
+                stack.push(target);
+
+        }
+
+        return answer;
+    }
 }
Index: BJ/BJ_1789/BJ_1789.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1789 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1789/BJ_1789.java b/BJ/BJ_1789/BJ_1789.java
--- a/BJ/BJ_1789/BJ_1789.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1789/BJ_1789.java	(date 1649333306453)
@@ -1,2 +1,17 @@
-package PACKAGE_NAME;public class BJ_1789 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_1789 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        long S = Long.parseLong(br.readLine());
+
+        long sum = 0, cnt = 0, i = 1;
+        while (sum <= S) {
+            sum += i++;
+            cnt++;
+        }
+        System.out.println(cnt - 1);
+    }
 }
Index: Inflearn/inflearn_7-5/inf_07_05.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_05 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-5/inf_07_05.java b/Inflearn/inflearn_7-5/inf_07_05.java
--- a/Inflearn/inflearn_7-5/inf_07_05.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-5/inf_07_05.java	(date 1652871647605)
@@ -1,2 +1,119 @@
-package PACKAGE_NAME;public class inf_07_05 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.StringTokenizer;
+
+class inf_07_05_Node {
+    int node;
+    inf_07_05_Node left, right;
+
+    inf_07_05_Node(int node) {
+        this.node = node;
+    }
+}
+
+class inf_07_05_TreeNode {
+    inf_07_05_Node tree;
+
+    public void initialTree(int root, int left, int right) {
+        if (tree == null) {
+            if (root != -1)
+                tree = new inf_07_05_Node(root);
+            if (left != -1)
+                tree.left = new inf_07_05_Node(left);
+            if (right != -1)
+                tree.right = new inf_07_05_Node(right);
+        } else {
+            searchTree(tree, root, left, right);
+        }
+    }
+
+    public void searchTree(inf_07_05_Node node, int root, int left, int right) {
+        if (node == null) return;
+        if (node.node == root) {
+            if (left != -1)
+                node.left = new inf_07_05_Node(left);
+            if (right != -1)
+                node.right = new inf_07_05_Node(right);
+        } else {
+            searchTree(node.left, root, left, right);
+            searchTree(node.right, root, left, right);
+        }
+    }
+
+    public List<Integer> postTree(inf_07_05_Node node, List<Integer> list) {
+        if (node.left != null)
+            postTree(node.left, list);
+        if (node.right != null)
+            postTree(node.right, list);
+        list.add(node.node);
+
+        return list;
+    }
+
+    public List<Integer> middleTree(inf_07_05_Node node, List<Integer> list) {
+        if (node.left != null)
+            middleTree(node.left, list);
+        list.add(node.node);
+        if (node.right != null)
+            middleTree(node.right, list);
+
+        return list;
+    }
+
+    public List<Integer> preTree(inf_07_05_Node node, List<Integer> list) {
+        list.add(node.node);
+        if (node.left != null)
+            preTree(node.left, list);
+        if (node.right != null)
+            preTree(node.right, list);
+
+        return list;
+    }
+}
+
+public class inf_07_05 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        int[][] maps = new int[N][3];
+        for (int i = 0; i < N; i++) {
+            StringTokenizer st = new StringTokenizer(br.readLine());
+            maps[i][0] = Integer.parseInt(st.nextToken());
+            maps[i][1] = Integer.parseInt(st.nextToken());
+            maps[i][2] = Integer.parseInt(st.nextToken());
+        }
+
+        for (int[] map : solution(N, maps)) {
+            for (int node : map)
+                System.out.print(node + " ");
+            System.out.println();
+        }
+    }
+
+    public static int[][] solution(int N, int[][] maps) {
+        List<List<Integer>> lists = new ArrayList<>();
+        int[][] answer = new int[3][N];
+        int idx = 0;
+        inf_07_05_TreeNode treeNode = new inf_07_05_TreeNode();
+
+        for (int[] map : maps)
+            treeNode.initialTree(map[0], map[1], map[2]);
+        
+        List<Integer> treeData = new ArrayList<>();
+
+        lists.add(treeNode.preTree(treeNode.tree, treeData));
+        treeData = new ArrayList<>();
+        lists.add(treeNode.middleTree(treeNode.tree, treeData));
+        treeData = new ArrayList<>();
+        lists.add(treeNode.postTree(treeNode.tree, treeData));
+
+        for (List<Integer> list : lists)
+            answer[idx++] = list.stream().mapToInt(Integer::intValue).toArray();
+
+        return answer;
+    }
 }
Index: Inflearn/inflearn_5-4/inf_05_04.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_05_04 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-4/inf_05_04.java b/Inflearn/inflearn_5-4/inf_05_04.java
--- a/Inflearn/inflearn_5-4/inf_05_04.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-4/inf_05_04.java	(date 1652286203107)
@@ -1,2 +1,72 @@
-package PACKAGE_NAME;public class inf_05_04 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Stack;
+
+public class inf_05_04 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String str = br.readLine();
+
+        System.out.print(solution(str));
+    }
+
+    public static int solution(String s) {
+        int answer = 0;
+        Stack<Integer> stack = new Stack<>();
+
+        for (char c : s.toCharArray()) {
+            if ('0' <= c && c <= '9') {
+                stack.push(c - '0');
+            } else {
+                int num1 = 0, num2 = 0;
+                if (!stack.isEmpty()) {
+                    num1 = stack.pop();
+                    num2 = stack.pop();
+                }
+                if (c == '-') stack.push(num1 - num2 > 0 ? num1 - num2 : num2 - num1);
+                else if (c == '+') stack.push(num1 + num2);
+                else if (c == '/') stack.push(num1 / num2);
+                else stack.push(num1 * num2);
+            }
+//            switch (c) {
+//                case '/':
+//                    if (!stack.isEmpty()) {
+//                        int num1 = stack.pop();
+//                        int num2 = stack.pop();
+//                        stack.push(num1 / num2);
+//                    }
+//                    break;
+//                case '+':
+//                    if (!stack.isEmpty()) {
+//                        int num1 = stack.pop();
+//                        int num2 = stack.pop();
+//                        stack.push(num1 + num2);
+//                    }
+//                    break;
+//                case '-':
+//                    if (!stack.isEmpty()) {
+//                        int num1 = stack.pop();
+//                        int num2 = stack.pop();
+//                        stack.push(num1 - num2 > 0 ? num1 - num2 : num2 - num1);
+//                    }
+//                    break;
+//                case '*':
+//                    if (!stack.isEmpty()) {
+//                        int num1 = stack.pop();
+//                        int num2 = stack.pop();
+//                        stack.push(num1 * num2);
+//                    }
+//                    break;
+//                default:
+//                    stack.push(Integer.valueOf(c - '0'));
+//                    break;
+//            }
+        }
+
+        if (!stack.isEmpty())
+            answer = stack.pop();
+
+        return answer;
+    }
 }
Index: BJ/BJ_13305/BJ_13305.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_13305 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_13305/BJ_13305.java b/BJ/BJ_13305/BJ_13305.java
--- a/BJ/BJ_13305/BJ_13305.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_13305/BJ_13305.java	(date 1649329617037)
@@ -1,2 +1,32 @@
-package PACKAGE_NAME;public class BJ_13305 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class BJ_13305 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        long[] len = new long[N - 1];
+        long[] price = new long[N];
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N - 1; i++)
+            len[i] = Long.parseLong(st.nextToken());
+
+        st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            price[i] = Long.parseLong(st.nextToken());
+
+        long min = Long.MAX_VALUE;
+        long sum = 0;
+        for (int i = 0; i < N - 1; i++) {
+//            if (min > price[i]) {
+//                min = price[i];
+                min = Math.min(min, price[i]);
+//            }
+            sum += (min * len[i]);
+        }
+        System.out.println(sum);
+    }
 }
Index: BJ/BJ_1157/BJ_1157.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1157 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1157/BJ_1157.java b/BJ/BJ_1157/BJ_1157.java
--- a/BJ/BJ_1157/BJ_1157.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1157/BJ_1157.java	(date 1650098800388)
@@ -1,2 +1,27 @@
-package PACKAGE_NAME;public class BJ_1157 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_1157 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        char[] chars = br.readLine().toUpperCase().toCharArray();
+
+        int[] cnt = new int[26];
+        for (int i = 0; i < chars.length; i++)
+            cnt[chars[i] - 'A'] += 1;
+
+        int max = -1;
+        char c = '?';
+        for (int i = 0; i < cnt.length; i++) {
+            if (cnt[i] > max) {
+                c = (char) ('A' + i);
+                max = cnt[i];
+                continue;
+            } else if (cnt[i] == max && max != 0)
+                c = '?';
+        }
+
+        System.out.print(c);
+    }
 }
Index: BJ/BJ_1715/BJ_1715.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1715 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1715/BJ_1715.java b/BJ/BJ_1715/BJ_1715.java
--- a/BJ/BJ_1715/BJ_1715.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1715/BJ_1715.java	(date 1649499003447)
@@ -1,2 +1,25 @@
-package PACKAGE_NAME;public class BJ_1715 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.PriorityQueue;
+
+public class BJ_1715 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        PriorityQueue<Integer> queue = new PriorityQueue<>(); // 우선순위 큐
+
+        for (int i = 0; i < N; i++)
+            queue.add(Integer.parseInt(br.readLine()));
+
+        int sum = 0;
+        while (queue.size() >= 2) {
+            int num1 = queue.poll();
+            int num2 = queue.poll();
+            sum += num1 + num2;
+            queue.add(num1 + num2);
+        }
+
+        System.out.println(sum);
+    }
 }
Index: Inflearn/inflearn_6-3/inf_06_03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_06_03 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-3/inf_06_03.java b/Inflearn/inflearn_6-3/inf_06_03.java
--- a/Inflearn/inflearn_6-3/inf_06_03.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-3/inf_06_03.java	(date 1652688949725)
@@ -1,2 +1,33 @@
-package PACKAGE_NAME;public class inf_06_03 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class inf_06_03 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int[] arr = new int[N];
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+
+        for (int k : solution(N, arr))
+            System.out.print(k + " ");
+    }
+
+    public static int[] solution(int N, int[] arr) {
+
+        for (int i = 1; i < N; i++) {
+            int target = arr[i];
+            for (int j = i - 1 ; j >= 0 ; j--) {
+                if (target <= arr[j]) {
+                    arr[j + 1] = arr[j];
+                    arr[j] = target;
+                }
+            }
+        }
+        return arr;
+    }
 }
Index: BJ/BJ_1316/BJ_1316.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1316 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1316/BJ_1316.java b/BJ/BJ_1316/BJ_1316.java
--- a/BJ/BJ_1316/BJ_1316.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1316/BJ_1316.java	(date 1650187132983)
@@ -1,2 +1,35 @@
-package PACKAGE_NAME;public class BJ_1316 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_1316 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        int result = 0;
+        for (int i = 0; i < N; i++) {
+            char[] charArray = br.readLine().toCharArray();
+            if (isCheck(charArray))
+                result++;
+        }
+        System.out.print(result);
+    }
+
+    public static boolean isCheck(char[] chars) {
+        boolean[] check = new boolean[26];
+        int prev = 0;
+
+        for (int i = 0; i < chars.length; i++) {
+            int target = chars[i];
+
+            if (prev != target) {
+                if (!check[chars[i] - 'a']) {
+                    check[chars[i] - 'a'] = true;
+                    prev = chars[i];
+                } else return false;
+            }
+        }
+        return true;
+    }
 }
Index: BJ/BJ_1152/BJ_1152.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_1152 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1152/BJ_1152.java b/BJ/BJ_1152/BJ_1152.java
--- a/BJ/BJ_1152/BJ_1152.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1152/BJ_1152.java	(date 1649755451515)
@@ -1,2 +1,15 @@
-package PACKAGE_NAME;public class BJ_1152 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_1152 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String str = br.readLine();
+        String[] split = str.split(" ");
+        if (str.startsWith(" ") && !str.isBlank())
+            System.out.println(split.length - 1);
+        else
+            System.out.println(split.length);
+    }
 }
Index: Inflearn/inflearn_6-5/inf_06_05.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_06_05 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-5/inf_06_05.java b/Inflearn/inflearn_6-5/inf_06_05.java
--- a/Inflearn/inflearn_6-5/inf_06_05.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-5/inf_06_05.java	(date 1652701367120)
@@ -1,2 +1,35 @@
-package PACKAGE_NAME;public class inf_06_05 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.StringTokenizer;
+
+public class inf_06_05 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[] arr = new int[N];
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+
+        System.out.print(solution(arr));
+    }
+
+    public static String solution(int[] arr) {
+        String answer = "U";
+        HashMap<Integer, Integer> map = new HashMap<>();
+
+        for (int number : arr)
+            map.put(number, map.getOrDefault(number, 0) + 1);
+
+        for (Integer key : map.keySet()) {
+            if (map.get(key) != 1) {
+                answer = "D";
+                break;
+            }
+        }
+
+        return answer;
+    }
 }
Index: Inflearn/inflearn_7-4/inf_07_04.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_04 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-4/inf_07_04.java b/Inflearn/inflearn_7-4/inf_07_04.java
--- a/Inflearn/inflearn_7-4/inf_07_04.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-4/inf_07_04.java	(date 1652801998229)
@@ -1,2 +1,29 @@
-package PACKAGE_NAME;public class inf_07_04 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class inf_07_04 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        for (int number : solution(N))
+            System.out.print(number + " ");
+    }
+
+    public static int[] solution(int N) {
+        int[] answer = new int[N];
+
+        answer[0] = answer[1] = 1;
+        if (N > 2)
+            answer = recursive(N, answer, 2);
+
+        return answer;
+    }
+
+    public static int[] recursive(int N, int[] arr, int index) {
+        if (index == N) return arr;
+        arr[index] = arr[index - 2] + arr[index - 1];
+        return recursive(N, arr, index + 1);
+    }
 }
Index: Inflearn/inflearn_4-2/int_04_2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic String solution(String str1, String str2) {\n\t\tString answer = \"\";\n\n\t\tHashMap<Character, Integer> map1 = new HashMap<>();\n\t\tHashMap<Character, Integer> map2 = new HashMap<>();\n\n\t\tfor (char c : str1.toCharArray()) {\n\t\t\tmap1.put(c, map1.getOrDefault(c, 0) +1);\n\t\t}\n\n\t\tfor (char c : str2.toCharArray()) {\n\t\t\tmap2.put(c, map2.getOrDefault(c, 0) + 1);\n\t\t}\n\n\t\tif (map1.equals(map2) == true)\n\t\t\tanswer = \"YES\";\n\t\telse \n\t\t\tanswer = \"NO\";\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tString str1 = scan.next();\n\t\tstr1 = str1.toUpperCase();\n\n\t\tString str2 = scan.next();\n\t\tstr2 = str2.toUpperCase();\n\n\t\tSystem.out.print(main.solution(str1, str2));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-2/int_04_2.java b/Inflearn/inflearn_4-2/int_04_2.java
--- a/Inflearn/inflearn_4-2/int_04_2.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-2/int_04_2.java	(date 1652079079762)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class int_04_2 {
 	public String solution(String str1, String str2) {
 		String answer = "";
 
@@ -24,7 +24,7 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		int_04_2 int042 = new int_04_2();
 		Scanner scan = new Scanner(System.in);
 
 		String str1 = scan.next();
@@ -33,6 +33,6 @@
 		String str2 = scan.next();
 		str2 = str2.toUpperCase();
 
-		System.out.print(main.solution(str1, str2));
+		System.out.print(int042.solution(str1, str2));
 	}
 }
Index: Inflearn/inflearn_4-1/inf_04_1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic char solution(String str, int students) {\n\t\tchar answer = ' ';\n\n\t\tHashMap<Character, Integer> hashMap = new HashMap<>();\n\t\tfor (char x : str.toCharArray()) {\n\t\t\thashMap.put(x, hashMap.getOrDefault(x, 0) + 1);\n\t\t}\n\t\tint max = 0;\n\t\tfor (char x : hashMap.keySet()) {\n\t\t\tif (hashMap.get(x) > max) { \n\t\t\t\tmax = hashMap.get(x);\n\t\t\t\tanswer=x;\n\t\t\t}\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint students = scan.nextInt();\n\t\tString str = scan.next();\n\n\t\tSystem.out.print(main.solution(str, students));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-1/inf_04_1.java b/Inflearn/inflearn_4-1/inf_04_1.java
--- a/Inflearn/inflearn_4-1/inf_04_1.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-1/inf_04_1.java	(date 1652076960229)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_04_1 {
 	public char solution(String str, int students) {
 		char answer = ' ';
 
@@ -20,12 +20,12 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		inf_04_1 inf041 = new inf_04_1();
 		Scanner scan = new Scanner(System.in);
 
 		int students = scan.nextInt();
 		String str = scan.next();
 
-		System.out.print(main.solution(str, students));
+		System.out.print(inf041.solution(str, students));
 	}
 }
Index: Inflearn/inflearn_4-4/inf_04_4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic int solution(String str1, String str2) {\n\t\tHashMap<Character, Integer> map1 = new HashMap<>();\n\t\tchar[] str  = str1.toCharArray();\n\t\tHashMap<Character, Integer> map2 = new HashMap<>();\n\t\tint answer = 0;\n\n\t\tfor (char c : str2.toCharArray())\n\t\t\tmap1.put(c, map1.getOrDefault(c, 0) + 1);\n\n\t\tfor (int i = 0 ; i < str2.length() - 1 ; i++) {\n\t\t\tmap2.put(str[i], map2.getOrDefault(str[i], 0) + 1);\t\n\t\t}\n\n\t\tint lt = 0;\n\t\tfor (int i = str2.length() - 1 ; i < str.length ; i++) {\n\t\t\tmap2.put(str[i], map2.getOrDefault(str[i], 0) + 1);\n\n\t\t\tif (map2.equals(map1))\n\t\t\t\tanswer++;\n\n\t\t\tif (map2.get(str[lt]) == 1)\n\t\t\t\tmap2.remove(str[lt]);\n\t\t\telse\n\t\t\t\tmap2.put(str[lt], map2.get(str[lt]) - 1);\n\t\t\tlt++;\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tString str1 = scan.next();\n\t\tString str2 = scan.next();\n\n\t\tSystem.out.print(main.solution(str1, str2));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-4/inf_04_4.java b/Inflearn/inflearn_4-4/inf_04_4.java
--- a/Inflearn/inflearn_4-4/inf_04_4.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-4/inf_04_4.java	(date 1652084577148)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_04_4 {
 	public int solution(String str1, String str2) {
 		HashMap<Character, Integer> map1 = new HashMap<>();
 		char[] str  = str1.toCharArray();
@@ -32,12 +32,12 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		inf_04_4 inf044 = new inf_04_4();
 		Scanner scan = new Scanner(System.in);
 
 		String str1 = scan.next();
 		String str2 = scan.next();
 
-		System.out.print(main.solution(str1, str2));
+		System.out.print(inf044.solution(str1, str2));
 	}
 }
Index: Inflearn/inflearn_4-3/inf_04_3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic ArrayList<Integer> solution(int[] value, int days, int k) {\n\t\tHashMap<Integer, Integer> map = new HashMap<>();\n\t\tArrayList<Integer> answer = new ArrayList<>();\n\n\t\tfor (int i = 0 ; i < k ; i++) {\n\t\t\tmap.put(value[i], map.getOrDefault(value[i], 0) + 1);\n\t\t}\n\n\t\tint lt = 0;\n\t\tanswer.add(map.size());\n\n\t\tfor (int i = k ; i < days ; i++) {\n\t\t\tmap.put(value[i], map.getOrDefault(value[i], 0) + 1);\n\t\t\tif (map.get(value[lt]) == 1)\n\t\t\t\tmap.remove(value[lt]);\n\t\t\telse \n\t\t\t\tmap.put(value[lt], map.get(value[lt]) -1);\n\t\t\tlt++;\n\t\t\tanswer.add(map.size());\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint days = scan.nextInt();\n\t\tint k = scan.nextInt();\n\t\tint value[] = new int[days];\n\n\t\tfor (int i = 0 ; i < days ; i++) \n\t\t\tvalue[i] = scan.nextInt();\n\n\t\tfor (int num : main.solution(value, days, k))\n\t\t\tSystem.out.print(num + \" \");\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-3/inf_04_3.java b/Inflearn/inflearn_4-3/inf_04_3.java
--- a/Inflearn/inflearn_4-3/inf_04_3.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-3/inf_04_3.java	(date 1652079942786)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_04_3 {
 	public ArrayList<Integer> solution(int[] value, int days, int k) {
 		HashMap<Integer, Integer> map = new HashMap<>();
 		ArrayList<Integer> answer = new ArrayList<>();
@@ -26,7 +26,7 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		inf_04_3 main = new inf_04_3();
 		Scanner scan = new Scanner(System.in);
 
 		int days = scan.nextInt();
Index: Inflearn/inflearn_5-1/inf_05_1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic String solution(String str) {\n\t\tStack<Character> stack = new Stack<>();\n\n\t\tfor (char x : str.toCharArray()) {\n\t\t\tif ( x == '(' )\n\t\t\t\tstack.push(x);\n\t\t\telse {\n\t\t\t\tif (stack.isEmpty())\n\t\t\t\t\treturn \"NO\";\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\tif (stack.isEmpty()) \n\t\t\treturn \"YES\";\n\t\telse\n\t\t\treturn \"NO\";\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tString str = scan.next();\n\n\t\tSystem.out.print(main.solution(str));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-1/inf_05_1.java b/Inflearn/inflearn_5-1/inf_05_1.java
--- a/Inflearn/inflearn_5-1/inf_05_1.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-1/inf_05_1.java	(date 1652104375460)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_05_1 {
 	public String solution(String str) {
 		Stack<Character> stack = new Stack<>();
 
@@ -20,7 +20,7 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		inf_05_1 main = new inf_05_1();
 		Scanner scan = new Scanner(System.in);
 
 		String str = scan.next();
Index: BJ/BJ_10809/BJ_10809.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_10809 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_10809/BJ_10809.java b/BJ/BJ_10809/BJ_10809.java
--- a/BJ/BJ_10809/BJ_10809.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_10809/BJ_10809.java	(date 1649838829748)
@@ -1,2 +1,25 @@
-package PACKAGE_NAME;public class BJ_10809 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class BJ_10809 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringBuilder sb = new StringBuilder();
+        char[] charArray = br.readLine().toCharArray();
+        int[] arr = new int[26];
+
+        for (int i = 0; i < charArray.length; i++) {
+            if (arr[charArray[i] - 'a'] == 0)
+                arr[charArray[i] - 'a'] = i + 1;
+        }
+
+        for (int i = 0; i < arr.length; i++) {
+            if (arr[i] == 0)
+                sb.append("-1 ");
+            else
+                sb.append(arr[i] - 1 + " ");
+        }
+        System.out.print(sb);
+    }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"cfa602ee-ea9b-42c5-973c-32a53ed88e38\" name=\"Default Changelist\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/BJ_15552/BJ_15552.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/BJ_15552/BJ_15552.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"mavenHome\" value=\"$APPLICATION_HOME_DIR$/plugins/maven/lib/maven3\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProjectCodeStyleSettingsMigration\">\n    <option name=\"version\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1hzmWUP9D7chN4XsFiJ3Cfb8X8W\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.appearance\" />\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"cfa602ee-ea9b-42c5-973c-32a53ed88e38\" name=\"Default Changelist\" comment=\"\" />\n      <created>1601022329262</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1601022329262</updated>\n      <workItem from=\"1601022331022\" duration=\"5000\" />\n    </task>\n    <servers />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/.idea/workspace.xml	(date 1653933731311)
@@ -1,17 +1,117 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="cfa602ee-ea9b-42c5-973c-32a53ed88e38" name="Default Changelist" comment="">
-      <change beforePath="$PROJECT_DIR$/BJ_15552/BJ_15552.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ_15552/BJ_15552.java" afterDir="false" />
+    <list default="true" id="cfa602ee-ea9b-42c5-973c-32a53ed88e38" name="Default Changelist" comment="오늘의 집 코딩테스트">
+      <change afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-8/inf_07_08_Re.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/codeStyles/Project.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/codeStyles/Project.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_10162/BJ_10162.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_10162/BJ_10162.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1026/BJ_1026.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1026/BJ_1026.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_10809/BJ_10809.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_10809/BJ_10809.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1094/BJ_1094.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1094/BJ_1094.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_11054/BJ_11054.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_11054/BJ_11054.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_11055/BJ_11055.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_11055/BJ_11055.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1152/BJ_1152.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1152/BJ_1152.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1157/BJ_1157.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1157/BJ_1157.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_11723/BJ_11723.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_11723/BJ_11723.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1316/BJ_1316.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1316/BJ_1316.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_13305/BJ_13305.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_13305/BJ_13305.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1504/BJ_1504.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1504/BJ_1504.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1541/BJ_1541.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1541/BJ_1541.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1715/BJ_1715.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1715/BJ_1715.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1789/BJ_1789.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1789/BJ_1789.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_18352/BJ_18352.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_18352/BJ_18352.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1916/BJ_1916.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1916/BJ_1916.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_1931/BJ_1931.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_1931/BJ_1931.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_2217/BJ_2217.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_2217/BJ_2217.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_2675/BJ_2675.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_2675/BJ_2675.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BJ/BJ_5585/BJ_5585.java" beforeDir="false" afterPath="$PROJECT_DIR$/BJ/BJ_5585/BJ_5585.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_2-12/inf_02_12.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_2-12/inf_02_12.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_2-12/inf_2_12.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_2-12/inf_2_12.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-1/inf_04_01.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-1/inf_04_01.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-1/inf_04_1.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-1/inf_04_1.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-2/inf_04_02.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-2/inf_04_02.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-2/int_04_2.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-2/int_04_2.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-3/inf_04_03.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-3/inf_04_03.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-3/inf_04_3.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-3/inf_04_3.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-4/inf_04_04.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-4/inf_04_04.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-4/inf_04_4.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-4/inf_04_4.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-5/inf_04_05.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-5/inf_04_05.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_4-5/inf_04_5.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_4-5/inf_04_5.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-1/inf_05_01.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-1/inf_05_01.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-1/inf_05_1.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-1/inf_05_1.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-2/inf_05_02.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-2/inf_05_02.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-2/inf_05_2.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-2/inf_05_2.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-3/inf_05_03.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-3/inf_05_03.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-3/inf_05_3.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-3/inf_05_3.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-4/inf_05_04.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-4/inf_05_04.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-4/inf_05_4.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-4/inf_05_4.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-5/inf_05_05.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-5/inf_05_05.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-5/inf_05_5.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-5/inf_05_5.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-6/inf_05_06.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-6/inf_05_06.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-6/inf_05_6.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-6/inf_05_6.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-7/inf_05_07.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-7/inf_05_07.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_5-7/inf_05_7.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_5-7/inf_05_7.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-1/inf_06_01.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-1/inf_06_01.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-1/inf_06_1.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-1/inf_06_1.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-10/inf_06_10.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-10/inf_06_10.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-2/inf_06_02.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-2/inf_06_02.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-2/inf_06_2.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-2/inf_06_2.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-3/inf_06_03.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-3/inf_06_03.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-3/inf_06_3.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-3/inf_06_3.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-5/inf_06_05.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-5/inf_06_05.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-5/inf_06_5.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-5/inf_06_5.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-6/inf_06_06.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-6/inf_06_06.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-6/inf_06_6.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-6/inf_06_6.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-7/inf_06_07.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-7/inf_06_07.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_6-7/inf_06_7.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_6-7/inf_06_7.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_7-1/inf_07_01.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-1/inf_07_01.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_7-12/inf_07_12.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-12/inf_07_12.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_7-2/inf_07_02.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-2/inf_07_02.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_7-3/inf_07_03.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-3/inf_07_03.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_7-4/inf_07_04.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-4/inf_07_04.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_7-5/inf_07_05.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-5/inf_07_05.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_7-7/inf_07_07.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_7-7/inf_07_07.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_8-1/inf_08_01.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_8-1/inf_08_01.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_8-2/inf_08_02.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_8-2/inf_08_02.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_8-3/inf_08_03.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_8-3/inf_08_03.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Inflearn/inflearn_8-4/inf_08_04.java" beforeDir="false" afterPath="$PROJECT_DIR$/Inflearn/inflearn_8-4/inf_08_04.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/algorithm.iml" beforeDir="false" afterPath="$PROJECT_DIR$/algorithm.iml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
+  <component name="CodeStyleSettingsInfer">
+    <option name="done" value="true" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
   <component name="Git.Settings">
+    <option name="PUSH_AUTO_UPDATE" value="true" />
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GitSEFilterConfiguration">
+    <file-type-list>
+      <filtered-out-file-type name="LOCAL_BRANCH" />
+      <filtered-out-file-type name="REMOTE_BRANCH" />
+      <filtered-out-file-type name="TAG" />
+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
+    </file-type-list>
+  </component>
+  <component name="GitToolBoxStore">
+    <option name="projectConfigVersion" value="5" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
   <component name="MavenImportPreferences">
     <option name="generalSettings">
       <MavenGeneralSettings>
@@ -20,7 +120,7 @@
     </option>
   </component>
   <component name="ProjectCodeStyleSettingsMigration">
-    <option name="version" value="1" />
+    <option name="version" value="2" />
   </component>
   <component name="ProjectId" id="1hzmWUP9D7chN4XsFiJ3Cfb8X8W" />
   <component name="ProjectViewState">
@@ -28,9 +128,60 @@
   </component>
   <component name="PropertiesComponent">
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="aspect.path.notification.shown" value="true" />
+    <property name="nodejs_package_manager_path" value="npm" />
+    <property name="project.structure.last.edited" value="Modules" />
+    <property name="project.structure.proportion" value="0.15" />
+    <property name="project.structure.side.proportion" value="0.2" />
     <property name="settings.editor.selected.configurable" value="configurable.group.appearance" />
+  </component>
+  <component name="RunManager" selected="Application.inf_07_08_Re">
+    <configuration name="inf_07_06_Re" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="inf_07_06_Re" />
+      <module name="algorithm" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="inf_07_08_Re" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="inf_07_08_Re" />
+      <module name="algorithm" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="inf_08_03" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="inf_08_03" />
+      <module name="algorithm" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="inf_08_04" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="inf_08_04" />
+      <module name="algorithm" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="inf_08_05" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="inf_08_05" />
+      <module name="algorithm" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.inf_07_08_Re" />
+        <item itemvalue="Application.inf_07_06_Re" />
+        <item itemvalue="Application.inf_08_05" />
+        <item itemvalue="Application.inf_08_04" />
+        <item itemvalue="Application.inf_08_03" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
@@ -41,7 +192,86 @@
       <option name="presentableId" value="Default" />
       <updated>1601022329262</updated>
       <workItem from="1601022331022" duration="5000" />
+      <workItem from="1649580673172" duration="24475000" />
+      <workItem from="1650196088517" duration="1151000" />
+      <workItem from="1650258704820" duration="6693000" />
+      <workItem from="1650350404706" duration="5673000" />
+      <workItem from="1650524518163" duration="12973000" />
+      <workItem from="1650613337591" duration="77000" />
+      <workItem from="1650958717309" duration="14809000" />
+      <workItem from="1651385900950" duration="8107000" />
+      <workItem from="1651567793113" duration="64253000" />
+      <workItem from="1652100747884" duration="3469000" />
+      <workItem from="1652106667880" duration="94744000" />
+      <workItem from="1653286136402" duration="37671000" />
+      <workItem from="1653930932410" duration="2134000" />
+    </task>
+    <task id="LOCAL-00001" summary="오늘의 집 코딩테스트">
+      <created>1649491138387</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1649491138387</updated>
     </task>
+    <task id="LOCAL-00002" summary="신입사원 - 그리디">
+      <created>1649493005685</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1649493005685</updated>
+    </task>
+    <task id="LOCAL-00003" summary="단어 뒤집기 - 문자열">
+      <created>1650263531762</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1650263531762</updated>
+    </task>
+    <task id="LOCAL-00004" summary="SSG 코딩테스트">
+      <created>1652612498245</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1652612498246</updated>
+    </task>
+    <task id="LOCAL-00005" summary="응급실">
+      <created>1652612523172</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1652612523172</updated>
+    </task>
+    <task id="LOCAL-00006" summary="이분검색">
+      <created>1652705320304</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1652705320304</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="오늘의 집 코딩테스트" />
+    <MESSAGE value="신입사원 - 그리디" />
+    <MESSAGE value="단어 뒤집기 - 문자열" />
+    <MESSAGE value="SSG 코딩테스트" />
+    <MESSAGE value="응급실" />
+    <MESSAGE value="이분검색" />
+    <option name="LAST_COMMIT_MESSAGE" value="이분검색" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/BJ/BJ_11053/BJ_11053.java</url>
+          <line>18</line>
+          <option name="timeStamp" value="1" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
 </project>
\ No newline at end of file
Index: Inflearn/inflearn_4-5/inf_04_5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic int solution(int[] arr, int card, int pick) {\n\t\tint answer = 0;\n\t\tTreeSet<Integer> set = new TreeSet<>(Collections.reverseOrder());\n\n\t\tfor (int i = 0 ; i < card ; i++) {\n\t\t\tfor (int j = i + 1 ; j < card ; j++) {\n\t\t\t\tfor (int k = j + 1; k < card ; k++) {\n\t\t\t\t\tset.add(arr[i] + arr[j] + arr[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (set.size() < pick)\n\t\t\treturn -1;\n\t\telse {\n\t\t\tObject[] value = set.toArray();\n\t\t\treturn (int) value[pick - 1];\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint card = scan.nextInt();\n\t\tint pick = scan.nextInt();\n\t\tint arr[] = new int[card];\n\t\tfor (int i = 0 ; i < card ; i++) \n\t\t\tarr[i] = scan.nextInt();\n\n\t\tSystem.out.print(main.solution(arr, card, pick));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-5/inf_04_5.java b/Inflearn/inflearn_4-5/inf_04_5.java
--- a/Inflearn/inflearn_4-5/inf_04_5.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-5/inf_04_5.java	(date 1652085926961)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_04_5 {
 	public int solution(int[] arr, int card, int pick) {
 		int answer = 0;
 		TreeSet<Integer> set = new TreeSet<>(Collections.reverseOrder());
@@ -21,7 +21,7 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		inf_04_5 main = new inf_04_5();
 		Scanner scan = new Scanner(System.in);
 
 		int card = scan.nextInt();
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectCodeStyleConfiguration\">\n  <code_scheme name=\"Project\" version=\"173\">\n    <JetCodeStyleSettings>\n      <option name=\"PACKAGES_TO_USE_STAR_IMPORTS\">\n        <value>\n          <package name=\"java.util\" alias=\"false\" withSubpackages=\"false\" />\n          <package name=\"kotlinx.android.synthetic\" alias=\"false\" withSubpackages=\"true\" />\n          <package name=\"io.ktor\" alias=\"false\" withSubpackages=\"true\" />\n        </value>\n      </option>\n      <option name=\"PACKAGES_IMPORT_LAYOUT\">\n        <value>\n          <package name=\"\" alias=\"false\" withSubpackages=\"true\" />\n          <package name=\"java\" alias=\"false\" withSubpackages=\"true\" />\n          <package name=\"javax\" alias=\"false\" withSubpackages=\"true\" />\n          <package name=\"kotlin\" alias=\"false\" withSubpackages=\"true\" />\n          <package name=\"\" alias=\"true\" withSubpackages=\"true\" />\n        </value>\n      </option>\n    </JetCodeStyleSettings>\n    <ScalaCodeStyleSettings>\n      <option name=\"MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE\" value=\"true\" />\n    </ScalaCodeStyleSettings>\n  </code_scheme>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
--- a/.idea/codeStyles/Project.xml	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/.idea/codeStyles/Project.xml	(date 1649580735685)
@@ -1,25 +1,10 @@
 <component name="ProjectCodeStyleConfiguration">
   <code_scheme name="Project" version="173">
     <JetCodeStyleSettings>
-      <option name="PACKAGES_TO_USE_STAR_IMPORTS">
-        <value>
-          <package name="java.util" alias="false" withSubpackages="false" />
-          <package name="kotlinx.android.synthetic" alias="false" withSubpackages="true" />
-          <package name="io.ktor" alias="false" withSubpackages="true" />
-        </value>
-      </option>
-      <option name="PACKAGES_IMPORT_LAYOUT">
-        <value>
-          <package name="" alias="false" withSubpackages="true" />
-          <package name="java" alias="false" withSubpackages="true" />
-          <package name="javax" alias="false" withSubpackages="true" />
-          <package name="kotlin" alias="false" withSubpackages="true" />
-          <package name="" alias="true" withSubpackages="true" />
-        </value>
-      </option>
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
     </JetCodeStyleSettings>
-    <ScalaCodeStyleSettings>
-      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
-    </ScalaCodeStyleSettings>
+    <codeStyleSettings language="kotlin">
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
+    </codeStyleSettings>
   </code_scheme>
 </component>
\ No newline at end of file
Index: Inflearn/inflearn_5-1/inf_05_01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_05_01 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-1/inf_05_01.java b/Inflearn/inflearn_5-1/inf_05_01.java
--- a/Inflearn/inflearn_5-1/inf_05_01.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-1/inf_05_01.java	(date 1652104560781)
@@ -1,2 +1,35 @@
-package PACKAGE_NAME;public class inf_05_01 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Stack;
+
+public class inf_05_01 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        String str = br.readLine();
+
+        System.out.print(solution(str));
+    }
+
+    public static String solution(String str) {
+        String answer = "YES";
+        Stack<Character> stack = new Stack<>();
+
+        for (char c : str.toCharArray()) {
+            switch (c) {
+                case '(':
+                    stack.push(c);
+                    break;
+                case ')':
+                    if (stack.isEmpty()) return "NO";
+                    stack.pop();
+                    break;
+            }
+        }
+
+        if (!stack.isEmpty())
+            return "NO";
+
+        return answer;
+    }
 }
Index: Inflearn/inflearn_5-3/inf_05_3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic Integer solution(int size, int[][] arr, int count, int[] countArr) {\n\t\tStack<Integer> stack = new Stack<>();\n\t\tint answer = 0;\n\n\t\tfor (int i = 0 ; i < count ; i++) {\n\t\t\tint num = countArr[i] - 1;\n\t\t\tfor (int j = 0 ; j < size ; j++) {\n\t\t\t\tif (arr[j][num] != 0) {\n\t\t\t\t\tif (stack.isEmpty())\n\t\t\t\t\t\tstack.push(arr[j][num]);\n\t\t\t\t\telse if (arr[j][num] == stack.peek()){\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t\tanswer += 2;\n\t\t\t\t\t}\n\t\t\t\t\telse if (arr[j][num] != stack.peek())\n\t\t\t\t\t\tstack.push(arr[j][num]);\n\t\t\t\t\tarr[j][num] = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn answer;\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint size = scan.nextInt();\n\t\tint[][] arr = new int[size][size];\n\n\t\tfor (int i = 0 ; i < size ; i++) {\n\t\t\tfor (int j = 0 ; j < size; j++) {\n\t\t\t\tarr[i][j] = scan.nextInt();\n\t\t\t}\n\t\t}\n\n\t\tint count = scan.nextInt();\n\t\tint[] countArr = new int[count];\n\t\tfor (int i = 0 ; i < count ; i++) \n\t\t\tcountArr[i] = scan.nextInt();\n\n\t\tSystem.out.print(main.solution(size, arr, count, countArr));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-3/inf_05_3.java b/Inflearn/inflearn_5-3/inf_05_3.java
--- a/Inflearn/inflearn_5-3/inf_05_3.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-3/inf_05_3.java	(date 1652107712448)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_05_3 {
 	public Integer solution(int size, int[][] arr, int count, int[] countArr) {
 		Stack<Integer> stack = new Stack<>();
 		int answer = 0;
@@ -28,7 +28,7 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		inf_05_3 inf053 = new inf_05_3();
 		Scanner scan = new Scanner(System.in);
 
 		int size = scan.nextInt();
@@ -45,6 +45,6 @@
 		for (int i = 0 ; i < count ; i++) 
 			countArr[i] = scan.nextInt();
 
-		System.out.print(main.solution(size, arr, count, countArr));
+		System.out.print(inf053.solution(size, arr, count, countArr));
 	}
 }
Index: Inflearn/inflearn_5-2/inf_05_2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic String solution(String str) {\n\t\tStack<Character> stack = new Stack<>();\n\t\tint count = 0;\n\t\tString answer = \"\";\n\n\t\tfor (char c : str.toCharArray()) {\n\t\t\tif (c == ')') {\n\t\t\t\tcount = stack.search('(');\n\t\t\t\tfor (int i = 0 ; i < count ; i++)\n\t\t\t\t\tstack.pop();\n\t\t//\t\twhile(stack.pop() != '(');\n\t\t\t}\n\t\t\telse\n\t\t\t\tstack.push(c);\n\t\t}\n\n\t\tfor (int i = 0 ; i < stack.size() ; i++)\n\t\t\tanswer += stack.get(i);\n\n\t\treturn answer;\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tString str = scan.next();\n\n\t\tSystem.out.print(main.solution(str));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-2/inf_05_2.java b/Inflearn/inflearn_5-2/inf_05_2.java
--- a/Inflearn/inflearn_5-2/inf_05_2.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-2/inf_05_2.java	(date 1652104833069)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_05_2 {
 	public String solution(String str) {
 		Stack<Character> stack = new Stack<>();
 		int count = 0;
@@ -25,11 +25,11 @@
 	}
 
 	public static void main(String[] args) {
-		Main main = new Main();
+		inf_05_2 inf052 = new inf_05_2();
 		Scanner scan = new Scanner(System.in);
 
 		String str = scan.next();
 
-		System.out.print(main.solution(str));
+		System.out.print(inf052.solution(str));
 	}
 }
Index: Inflearn/inflearn_5-5/inf_05_5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic Integer solution(String str) {\n\t\tint answer = 0;\n\t\tint count = 0;\n\t\tStack<Character> stack = new Stack<>();\n\n/*\n\t\tfor (char c : str.toCharArray()) {\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstack.pop();\n\t\t\t\tif (c == \n\t\t\t\tanswer += stack.size();\n\t\t\t}\n\t\t}\n*/\n\n\t\tfor (int i = 0 ; i < str.length() ; i++) {\n\t\t\tif (str.charAt(i) == '(')\n\t\t\t\tstack.push('(');\n\t\t\telse {\n\t\t\t\tstack.pop();\n\t\t\t\tif (str.charAt(i-1) == '(')\n\t\t\t\t\tanswer += stack.size();\n\t\t\t\telse \n\t\t\t\t\tanswer += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tString str = scan.next();\n\n\t\tSystem.out.println(main.solution(str));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-5/inf_05_5.java b/Inflearn/inflearn_5-5/inf_05_5.java
--- a/Inflearn/inflearn_5-5/inf_05_5.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-5/inf_05_5.java	(date 1652286365326)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_05_5 {
 	public Integer solution(String str) {
 		int answer = 0;
 		int count = 0;
@@ -35,7 +35,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_05_5 main = new inf_05_5();
 		Scanner scan = new Scanner(System.in);
 
 		String str = scan.next();
Index: Inflearn/inflearn_5-4/inf_05_4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic Integer solution(String str) {\n\t\tStack<Integer> stack = new Stack<>();\n\t\tint answer = 0;\n\n\t\tfor (char c : str.toCharArray()) {\n\t\t\tif (c >= '0' && c <= '9')\n\t\t\t\tstack.push(c-48);\n\t\t\telse {\n\t\t\t\tint rt = stack.pop();\n\t\t\t\tint lt = stack.pop();\n\t\t\t\tif (c == '+')\n\t\t\t\t\tstack.push(lt+rt);\n\t\t\t\telse if (c == '-')\n\t\t\t\t\tstack.push(lt-rt);\n\t\t\t\telse if (c == '*')\n\t\t\t\t\tstack.push(lt*rt);\n\t\t\t\telse if (c == '/')\n\t\t\t\t\tstack.push(lt/rt);\n\t\t\t}\n\t\t}\n\t\tanswer = stack.get(0);\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tString str = scan.next();\n\n\t\tSystem.out.println(main.solution(str));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-4/inf_05_4.java b/Inflearn/inflearn_5-4/inf_05_4.java
--- a/Inflearn/inflearn_5-4/inf_05_4.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-4/inf_05_4.java	(date 1652284302740)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_05_4 {
 	public Integer solution(String str) {
 		Stack<Integer> stack = new Stack<>();
 		int answer = 0;
@@ -27,7 +27,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_05_4 main = new inf_05_4();
 		Scanner scan = new Scanner(System.in);
 
 		String str = scan.next();
Index: BJ/BJ_11055/BJ_11055.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_11055 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_11055/BJ_11055.java b/BJ/BJ_11055/BJ_11055.java
--- a/BJ/BJ_11055/BJ_11055.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_11055/BJ_11055.java	(date 1649590816431)
@@ -1,2 +1,28 @@
-package PACKAGE_NAME;public class BJ_11055 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class BJ_11055 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[] A = new int[N];
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            A[i] = Integer.parseInt(st.nextToken());
+
+        int[] dp = new int[N];
+        int max = Integer.MIN_VALUE;
+        for (int i = 0; i < N; i++) {
+            dp[i] = A[i];
+            for (int j = 0 ; j < i ; j++) {
+                if (A[i] > A[j] && dp[i] < dp[j] + A[i])
+                    dp[i] = dp[j] + A[i];
+            }
+            max = Math.max(dp[i], max);
+        }
+        System.out.println(max);
+    }
 }
Index: Inflearn/inflearn_5-7/inf_05_7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic String solution(String p, String sub) {\n\t\tQueue<Character> queue = new LinkedList<>();\n\n\t\tfor (char c : p.toCharArray())\n\t\t\tqueue.offer(c);\n\n\t\tfor (char c : sub.toCharArray()) {\n\t\t\tif (c == queue.peek())\n\t\t\t\tqueue.poll();\n\t\t\tif (queue.isEmpty())\n\t\t\t\treturn \"YES\";\n\t\t}\n\n\t\treturn \"NO\";\n\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tString p = scan.next();\n\t\tString sub = scan.next();\n\n\t\tSystem.out.println(main.solution(p, sub));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-7/inf_05_7.java b/Inflearn/inflearn_5-7/inf_05_7.java
--- a/Inflearn/inflearn_5-7/inf_05_7.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-7/inf_05_7.java	(date 1652324061205)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_05_7 {
 	public String solution(String p, String sub) {
 		Queue<Character> queue = new LinkedList<>();
 
@@ -19,12 +19,12 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_05_7 inf057 = new inf_05_7();
 		Scanner scan = new Scanner(System.in);
 
 		String p = scan.next();
 		String sub = scan.next();
 
-		System.out.println(main.solution(p, sub));
+		System.out.println(inf057.solution(p, sub));
 	}
 }
Index: Inflearn/inflearn_4-3/inf_04_03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_04_03 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_4-3/inf_04_03.java b/Inflearn/inflearn_4-3/inf_04_03.java
--- a/Inflearn/inflearn_4-3/inf_04_03.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_4-3/inf_04_03.java	(date 1652084122698)
@@ -1,2 +1,46 @@
-package PACKAGE_NAME;public class inf_04_03 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.StringTokenizer;
+
+public class inf_04_03 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int K = Integer.parseInt(st.nextToken());
+
+        st = new StringTokenizer(br.readLine());
+        int[] prices = new int[N];
+
+        for (int i = 0; i < N; i++)
+            prices[i] = Integer.parseInt(st.nextToken());
+
+        int[] answer = solution(N, K, prices);
+        for (int k : answer)
+            System.out.print(k + " ");
+    }
+
+    public static int[] solution(int N, int K, int[] prices) {
+        int[] answer = new int[N - K + 1];
+        int lt = 0, rt = 0, idx = 0;
+        HashMap<Integer, Integer> map = new HashMap<>();
+
+        while (rt < N) {
+            map.put(prices[rt], map.getOrDefault(prices[rt], 0) + 1);
+            rt++;
+            if (rt == K) {
+                answer[idx++] = map.size();
+                if (map.get(prices[lt]) == 1)
+                    map.remove(prices[lt]);
+                else
+                    map.put(prices[lt], map.get(prices[lt]) - 1);
+                lt++;
+                K++;
+            }
+        }
+
+        return answer;
+    }
 }
Index: BJ/BJ_11723/BJ_11723.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><<<<<<< HEAD\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.LinkedList;\nimport java.util.StringTokenizer;\n\npublic class BJ_11723 {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder sb = new StringBuilder();\n        int M = Integer.parseInt(br.readLine());\n        LinkedList<Integer> list = new LinkedList<>();\n\n        for (int i = 0; i < M; i++) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            String str = st.nextToken();\n            int num = 0;\n\n            switch (str) {\n                case \"add\":\n                    num = Integer.parseInt(st.nextToken());\n                    if (!list.contains(num))\n                        list.push(num);\n                    break;\n                case \"remove\":\n                    num = Integer.parseInt(st.nextToken());\n                    if (list.contains(num) && !list.isEmpty())\n                        list.remove(list.indexOf(num));\n                    break;\n                case \"check\":\n                    num = Integer.parseInt(st.nextToken());\n                    if (list.contains(num)) sb.append(1 + \"\\n\");\n                    else sb.append(0 + \"\\n\");\n                    break;\n                case \"toggle\":\n                    num = Integer.parseInt(st.nextToken());\n                    if (list.contains(num) && !list.isEmpty())\n                        list.remove(list.indexOf(num));\n                    else\n                        list.push(num);\n                    break;\n                case \"all\":\n                    list.clear();\n                    for (int j = 1; j < 21; j++)\n                        list.push(j);\n                    break;\n                case \"empty\":\n                    list.clear();\n                    break;\n            }\n        }\n        System.out.print(sb);\n    }\n=======\npackage PACKAGE_NAME;public class BJ_11723 {\n>>>>>>> origin/master\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_11723/BJ_11723.java b/BJ/BJ_11723/BJ_11723.java
--- a/BJ/BJ_11723/BJ_11723.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_11723/BJ_11723.java	(date 1652017328820)
@@ -1,4 +1,3 @@
-<<<<<<< HEAD
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -52,7 +51,4 @@
         }
         System.out.print(sb);
     }
-=======
-package PACKAGE_NAME;public class BJ_11723 {
->>>>>>> origin/master
 }
Index: Inflearn/inflearn_5-6/inf_05_6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic Integer solution(int num, int k) {\n\t\tint answer = 0;\n\t\tQueue<Integer> queue = new LinkedList<>();\t\t\t\n\n\t\tfor (int i = 1 ; i <= num ; i++) \n\t\t\tqueue.offer(i);\n\n\t\twhile(!queue.isEmpty()) {\n\t\t\tfor (int i = 1 ; i < k ; i++) {\n\t\t\t\tqueue.offer(queue.poll());\n\t\t\t}\n\t\t\tqueue.poll();\n\t\t\tif (queue.size() == 1)\n\t\t\t\tanswer = queue.poll(); \n\t\t}\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint num = scan.nextInt();\n\t\tint k = scan.nextInt();\n\n\t\tSystem.out.println(main.solution(num, k));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_5-6/inf_05_6.java b/Inflearn/inflearn_5-6/inf_05_6.java
--- a/Inflearn/inflearn_5-6/inf_05_6.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_5-6/inf_05_6.java	(date 1652321695855)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_05_6 {
 	public Integer solution(int num, int k) {
 		int answer = 0;
 		Queue<Integer> queue = new LinkedList<>();			
@@ -21,12 +21,12 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_05_6 inf056 = new inf_05_6();
 		Scanner scan = new Scanner(System.in);
 
 		int num = scan.nextInt();
 		int k = scan.nextInt();
 
-		System.out.println(main.solution(num, k));
+		System.out.println(inf056.solution(num, k));
 	}
 }
Index: Inflearn/inflearn_6-6/inf_06_06.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_06_06 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-6/inf_06_06.java b/Inflearn/inflearn_6-6/inf_06_06.java
--- a/Inflearn/inflearn_6-6/inf_06_06.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-6/inf_06_06.java	(date 1652703194230)
@@ -1,2 +1,33 @@
-package PACKAGE_NAME;public class inf_06_06 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.StringTokenizer;
+
+public class inf_06_06 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[] arr = new int[N];
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+
+        for (int k : solution(arr))
+            System.out.print(k + " ");
+    }
+
+    public static int[] solution(int[] heights) {
+        int[] answer = new int[2];
+        int[] sortHeights = heights.clone();
+        Arrays.sort(sortHeights);
+        int idx = 0;
+
+        for (int i = 0; i < heights.length; i++) {
+            if (heights[i] != sortHeights[i]) answer[idx++] = i + 1;
+            if (idx == 2) break;
+        }
+
+        return answer;
+    }
 }
Index: BJ/BJ_1094/BJ_1094.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><<<<<<< HEAD\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class BJ_1094 {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int X = Integer.parseInt(br.readLine());\n        int branch = 64, cnt = 0;\n\n        while (branch > 0) {\n            if (branch <= X) {\n                X -= branch;\n                cnt++;\n            }\n            if (X == 0) {\n                break;\n            }\n            branch /= 2;\n        }\n        System.out.println(cnt);\n    }\n=======\npackage PACKAGE_NAME;public class BJ_1094 {\n>>>>>>> origin/master\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1094/BJ_1094.java b/BJ/BJ_1094/BJ_1094.java
--- a/BJ/BJ_1094/BJ_1094.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1094/BJ_1094.java	(date 1652017328822)
@@ -1,4 +1,3 @@
-<<<<<<< HEAD
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -21,7 +20,4 @@
         }
         System.out.println(cnt);
     }
-=======
-package PACKAGE_NAME;public class BJ_1094 {
->>>>>>> origin/master
 }
Index: Inflearn/inflearn_6-3/inf_06_3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic int[] solution(int[] arr){\n\n\t\tfor (int i = 1 ; i < arr.length ; i++) {\n\t\t\tint target = arr[i];\n\n/*\t\t\t내 방식\n\t\t\tfor (int j = i - 1 ; j >= 0 ; j--) {\n\t\t\t\tif (target < arr[j]) {\n\t\t\t\t\tarr[j+1] = arr[j];\n\t\t\t\t\tarr[j] = target;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n*/\n\n\t\t\t// 다른 방식\n\t\t\tint j = i - 1;\n\t\t\twhile(j >= 0 && target < arr[j]) {\n\t\t\t\tarr[j+1] = arr[j];\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tarr[j+1] = target;\n\t\t}\n\n\t\treturn arr;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint num = scan.nextInt();\n\t\tint[] arr = new int[num];\n\t\tfor (int i = 0 ; i < num ; i++)\n\t\t\tarr[i] = scan.nextInt();\n\n\t\tfor (int k : main.solution(arr))\n\t\t\tSystem.out.print(k + \" \");\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-3/inf_06_3.java b/Inflearn/inflearn_6-3/inf_06_3.java
--- a/Inflearn/inflearn_6-3/inf_06_3.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-3/inf_06_3.java	(date 1652683793568)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_06_3 {
 	public int[] solution(int[] arr){
 
 		for (int i = 1 ; i < arr.length ; i++) {
@@ -30,7 +30,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_06_3 main = new inf_06_3();
 		Scanner scan = new Scanner(System.in);
 
 		int num = scan.nextInt();
Index: Inflearn/inflearn_6-2/inf_06_2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic int[] solution(int[] arr){\n\n\t\tfor (int i = 0 ; i < arr.length ; i++) {\n\t\t\tfor (int j = i + 1 ; j < arr.length ; j++) {\n\t\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\t\tint tmp = arr[i];\n\t\t\t\t\tarr[i] = arr[j];\n\t\t\t\t\tarr[j] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn arr;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint num = scan.nextInt();\n\t\tint[] arr = new int[num];\n\t\tfor (int i = 0 ; i < num ; i++)\n\t\t\tarr[i] = scan.nextInt();\n\n\t\tfor (int k : main.solution(arr))\n\t\t\tSystem.out.print(k + \" \");\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-2/inf_06_2.java b/Inflearn/inflearn_6-2/inf_06_2.java
--- a/Inflearn/inflearn_6-2/inf_06_2.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-2/inf_06_2.java	(date 1652682822440)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_06_2 {
 	public int[] solution(int[] arr){
 
 		for (int i = 0 ; i < arr.length ; i++) {
@@ -17,7 +17,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_06_2 inf062 = new inf_06_2();
 		Scanner scan = new Scanner(System.in);
 
 		int num = scan.nextInt();
@@ -25,7 +25,7 @@
 		for (int i = 0 ; i < num ; i++)
 			arr[i] = scan.nextInt();
 
-		for (int k : main.solution(arr))
+		for (int k : inf062.solution(arr))
 			System.out.print(k + " ");
 	}
 }
Index: BJ/BJ_18352/BJ_18352.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_18352 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_18352/BJ_18352.java b/BJ/BJ_18352/BJ_18352.java
--- a/BJ/BJ_18352/BJ_18352.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_18352/BJ_18352.java	(date 1651834561882)
@@ -1,2 +1,79 @@
-package PACKAGE_NAME;public class BJ_18352 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.PriorityQueue;
+import java.util.StringTokenizer;
+
+class BJ_18352_Node implements Comparable<BJ_18352_Node> {
+    int dist, cost;
+
+    BJ_18352_Node(int dist, int cost) {
+        this.dist = dist;
+        this.cost = cost;
+    }
+
+    @Override
+    public int compareTo(BJ_18352_Node o) {
+        return cost - o.cost;
+    }
+}
+
+public class BJ_18352 {
+    public static ArrayList<ArrayList<BJ_18352_Node>> graph;
+    public static int[] dist;
+    public static final int INF = 200000000;
+
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        StringBuilder sb = new StringBuilder();
+        int N = Integer.parseInt(st.nextToken());
+        int M = Integer.parseInt(st.nextToken());
+        int K = Integer.parseInt(st.nextToken());
+        int start = Integer.parseInt(st.nextToken());
+
+        graph = new ArrayList<>();
+        for (int i = 0; i < N + 1; i++)
+            graph.add(new ArrayList<>());
+
+        for (int i = 0; i < M; i++) {
+            st = new StringTokenizer(br.readLine());
+
+            int startNum = Integer.parseInt(st.nextToken());
+            int endNum = Integer.parseInt(st.nextToken());
+
+            graph.get(startNum).add(new BJ_18352_Node(endNum, 1));
+        }
+
+        dist = new int[N + 1];
+        dijkstra(start);
+
+        for (int i = 0; i < N + 1; i++)
+            if (dist[i] == K) sb.append(i + "\n");
+        if (sb.length() == 0)
+            System.out.print(-1);
+        else
+            System.out.print(sb);
+    }
+
+    public static void dijkstra(int start) {
+        Arrays.fill(dist, INF);
+        dist[start] = 0;
+        PriorityQueue<BJ_18352_Node> queue = new PriorityQueue<>();
+        queue.add(new BJ_18352_Node(start, 0));
+
+        while (!queue.isEmpty()) {
+            BJ_18352_Node now = queue.poll();
+            if (dist[now.dist] < now.cost) continue;
+
+            for (BJ_18352_Node next : graph.get(now.dist)) {
+                if (dist[next.dist] > now.cost + next.cost) {
+                    dist[next.dist] = now.cost + next.cost;
+                    queue.add(new BJ_18352_Node(next.dist, dist[next.dist]));
+                }
+            }
+        }
+    }
 }
Index: Inflearn/inflearn_6-1/inf_06_1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic int[] solution(int[] arr){\n\n\t\tfor (int k = 0 ; k < arr.length ; k++) {\n\t\t\tint min = k;\n\t\t\tfor (int i = k + 1 ; i < arr.length ; i++) {\n\t\t\t\tif (arr[i] < arr[min])\n\t\t\t\t\tmin = i;\n\t\t\t}\n\t\t\tint tmp = arr[min];\n\t\t\tarr[min] = arr[k];\n\t\t\tarr[k] = tmp;\n\t\t}\n\n\t\treturn arr;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint num = scan.nextInt();\n\t\tint[] arr = new int[num];\n\t\tfor (int i = 0 ; i < num ; i++) {\n\t\t\tarr[i] = scan.nextInt();\n\t\t}\n\n\t\tfor (int k : main.solution(arr))\n\t\t\tSystem.out.print(k + \" \");\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-1/inf_06_1.java b/Inflearn/inflearn_6-1/inf_06_1.java
--- a/Inflearn/inflearn_6-1/inf_06_1.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-1/inf_06_1.java	(date 1652612581713)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_06_1 {
 	public int[] solution(int[] arr){
 
 		for (int k = 0 ; k < arr.length ; k++) {
@@ -18,7 +18,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_06_1 inf061 = new inf_06_1();
 		Scanner scan = new Scanner(System.in);
 
 		int num = scan.nextInt();
@@ -27,7 +27,7 @@
 			arr[i] = scan.nextInt();
 		}
 
-		for (int k : main.solution(arr))
+		for (int k : inf061.solution(arr))
 			System.out.print(k + " ");
 	}
 }
Index: Inflearn/inflearn_6-5/inf_06_5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic Character solution(int num, int[] arr) {\n\t\tArrays.sort(arr);\n\n\t\tfor (int i = 0 ; i < num - 1 ; i++) {\n\t\t\tif (arr[i] == arr[i+1])\n\t\t\t\treturn 'D';\n\t\t} \n\n\t\treturn 'U';\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint num = scan.nextInt();\n\t\tint[] arr = new int[num];\n\n\t\tfor (int i = 0 ; i < num ; i++)\n\t\t\tarr[i] = scan.nextInt();\n\n\t\tSystem.out.print(main.solution(num, arr));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-5/inf_06_5.java b/Inflearn/inflearn_6-5/inf_06_5.java
--- a/Inflearn/inflearn_6-5/inf_06_5.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-5/inf_06_5.java	(date 1652701020550)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_06_5 {
 	public Character solution(int num, int[] arr) {
 		Arrays.sort(arr);
 
@@ -13,7 +13,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_06_5 main = new inf_06_5();
 		Scanner scan = new Scanner(System.in);
 
 		int num = scan.nextInt();
Index: BJ/BJ_1504/BJ_1504.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_150 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1504/BJ_1504.java b/BJ/BJ_1504/BJ_1504.java
--- a/BJ/BJ_1504/BJ_1504.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1504/BJ_1504.java	(date 1651832521668)
@@ -1,2 +1,89 @@
-package PACKAGE_NAME;public class BJ_150 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.PriorityQueue;
+import java.util.StringTokenizer;
+
+class BJ_1504_Node implements Comparable<BJ_1504_Node> {
+    int dist, cost;
+
+    BJ_1504_Node(int dist, int cost) {
+        this.dist = dist;
+        this.cost = cost;
+    }
+
+    @Override
+    public int compareTo(BJ_1504_Node o) {
+        return cost - o.cost;
+    }
+}
+
+public class BJ_1504 {
+    public static ArrayList<ArrayList<BJ_1504_Node>> graph;
+    public static int[] dist;
+    public static final int INF = 200000000;
+    public static int N;
+
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        N = Integer.parseInt(st.nextToken());
+        int E = Integer.parseInt(st.nextToken());
+
+        graph = new ArrayList<>();
+        for (int i = 0; i < N + 1; i++)
+            graph.add(new ArrayList<>());
+
+        for (int i = 0; i < E; i++) {
+            st = new StringTokenizer(br.readLine());
+
+            int startNum = Integer.parseInt(st.nextToken());
+            int endNum = Integer.parseInt(st.nextToken());
+            int cost = Integer.parseInt(st.nextToken());
+
+            graph.get(startNum).add(new BJ_1504_Node(endNum, cost));
+            graph.get(endNum).add(new BJ_1504_Node(startNum, cost)); // 양방향
+        }
+
+        st = new StringTokenizer(br.readLine());
+        int v1 = Integer.parseInt(st.nextToken());
+        int v2 = Integer.parseInt(st.nextToken());
+
+        dist = new int[N + 1];
+
+        int min1 = 0, min2 = 0;
+        min1 += dijkstra(1, v1);
+        min1 += dijkstra(v1, v2);
+        min1 += dijkstra(v2, N);
+
+        min2 += dijkstra(1, v2);
+        min2 += dijkstra(v2, v1);
+        min2 += dijkstra(v1, N);
+
+        int result = min1 >= INF && min2 >= INF ? -1 : Math.min(min1, min2);
+        System.out.println(result);
+    }
+
+    public static int dijkstra(int start, int end) {
+        Arrays.fill(dist, INF);
+        dist[start] = 0;
+        PriorityQueue<BJ_1504_Node> queue = new PriorityQueue<>();
+        queue.add(new BJ_1504_Node(start, 0));
+
+        while (!queue.isEmpty()) {
+            BJ_1504_Node now = queue.poll();
+
+            if (now.dist == end) break;
+            if (now.cost > dist[now.dist]) continue;
+            for (BJ_1504_Node next : graph.get(now.dist)) {
+                if (dist[next.dist] > now.cost + next.cost) {
+                    dist[next.dist] = now.cost + next.cost;
+                    queue.add(new BJ_1504_Node(next.dist, dist[next.dist]));
+                }
+            }
+        }
+        return dist[end];
+    }
 }
Index: Inflearn/inflearn_6-2/inf_06_02.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_06_02 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-2/inf_06_02.java b/Inflearn/inflearn_6-2/inf_06_02.java
--- a/Inflearn/inflearn_6-2/inf_06_02.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-2/inf_06_02.java	(date 1652683633542)
@@ -1,2 +1,33 @@
-package PACKAGE_NAME;public class inf_06_02 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class inf_06_02 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int[] arr = new int[N];
+        for (int i = 0; i < N; i++)
+            arr[i] = Integer.parseInt(st.nextToken());
+        for (int k : solution(N, arr))
+            System.out.print(k + " ");
+    }
+
+    public static int[] solution(int N, int[] arr) {
+
+        for (int i = 0; i < N - 1; i++) {
+            for (int j = i + 1; j < N; j++) {
+                if (arr[i] > arr[j]) {
+                    int tmp = arr[i];
+                    arr[i] = arr[j];
+                    arr[j] = tmp;
+                }
+            }
+        }
+
+        return arr;
+    }
 }
Index: Inflearn/inflearn_6-7/inf_06_7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\n/* Comparable을 사용\nclass Point implements Comparable<Point> {\n\tpublic int x, y;\n\n\tPoint(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t// 정렬을 어떤걸로 기준을 할 지 정해주는 메소드\n\t@Override\n\tpublic int compareTo(Point p) {\n\t\tif (this.x == p.x)\n\t\t\treturn this.y - p.y;\n\t\telse\n\t\t\treturn this.x - p.x;\n\t}\n}\n*/\n\n// Comparator을 사용\nclass Point {\n\tpublic int x, y;\n\n\tPoint(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nclass MyComparator implements Comparator<Point> {\n\t@Override\n\tpublic int compare(Point p1, Point p2) {\n\t\tif (p1.x == p2.x)\n\t\t\treturn Integer.compare(p1.y, p2.y);\n\t\telse\n\t\t\treturn Integer.compare(p1.x, p2.x);\n\t}\n}\n\n\npublic class Main {\n\tpublic int[][] solution(int size, int[][] location) {\n\n\t\t// Comparator 클래스를 사용해 compare의 메소드를 가지고 비교한다.\n\t\t// 간략화 한 코드\n/*\t\tArrays.sort(location, (a, b) -> {\n\t\t\tif (a[0] == b[0])\n\t\t\t\treturn Integer.compare(a[1], b[1]);\n\t\t\telse\n\t\t\t\treturn Integer.compare(a[0], b[0]);\n\t\t});\n*/\n\n\t\t// 이게 원조 코드\n\t\tArrays.sort(location, new Comparator<int[]>() {\n\t\t\t@Override\n\t\t\tpublic int compare(int[] a1 , int[] a2) {\n\t\t\t\tif (a1[0] == a2[0])\n\t\t\t\t\treturn a1[1] - a2[1];\n\t\t\t\telse\n\t\t\t\t\treturn a1[0] - a2[0];\n\t\t\t}\n\t\t});\n\t\treturn location;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\n\t\tint size = scan.nextInt();\n/*\n\t\tint[][] location = new int[size][2];\n\n\t\tfor (int i = 0 ; i < size ; i++) {\n\t\t\tfor (int j = 0 ; j < 2 ; j++) {\n\t\t\t\tlocation[i][j] = scan.nextInt();\n\t\t\t}\n\t\t}\n\n\t\tfor (int[] k : main.solution(size, location)) {\n\t\t\tfor (int l : k) \n\t\t\t\tSystem.out.print(l + \" \");\n\t\t\tSystem.out.println(\"\");\n\t\t}\n*/\n\t\tArrayList<Point> point = new ArrayList<>();\n\t\tfor (int i = 0 ; i < size ; i++) {\n\t\t\tint x = scan.nextInt();\n\t\t\tint y = scan.nextInt();\n\t\t\tpoint.add(new Point(x, y));\n\t\t}\n\t\tMyComparator com = new MyComparator();\n\t\tCollections.sort(point, com);\n//\t\tCollections.sort(point);\n\t\tfor (Point o : point)\n\t\t\tSystem.out.print(o.x + \" \" + o.y + \"\\n\");\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-7/inf_06_7.java b/Inflearn/inflearn_6-7/inf_06_7.java
--- a/Inflearn/inflearn_6-7/inf_06_7.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-7/inf_06_7.java	(date 1652703400904)
@@ -41,7 +41,7 @@
 }
 
 
-public class Main {
+public class inf_06_7 {
 	public int[][] solution(int size, int[][] location) {
 
 		// Comparator 클래스를 사용해 compare의 메소드를 가지고 비교한다.
@@ -68,7 +68,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_06_7 inf067 = new inf_06_7();
 		Scanner scan = new Scanner(System.in);
 
 
Index: BJ/BJ_11054/BJ_11054.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class BJ_11054 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_11054/BJ_11054.java b/BJ/BJ_11054/BJ_11054.java
--- a/BJ/BJ_11054/BJ_11054.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_11054/BJ_11054.java	(date 1649586380463)
@@ -1,2 +1,38 @@
-package PACKAGE_NAME;public class BJ_11054 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class BJ_11054 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int[] A = new int[N];
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        for (int i = 0; i < N; i++)
+            A[i] = Integer.parseInt(st.nextToken());
+
+        int[] upDp = new int[N];
+        for (int i = 0; i < N; i++) {
+            upDp[i] = 1;
+            for (int j = 0; j < i; j++) {
+                if (A[i] > A[j] && upDp[i] < upDp[j] + 1) upDp[i] += 1;
+            }
+        }
+
+        int[] downDp = new int[N];
+        for (int i = N - 1; i >= 0; i--) {
+            downDp[i] = 1;
+            for (int j = N - 1; j >= i ; j--) {
+                if (A[i] > A[j] && downDp[i] < downDp[j] + 1) downDp[i] += 1;
+            }
+        }
+
+        int max = Integer.MIN_VALUE;
+        for (int i = 0 ; i < N ; i++)
+            max = Math.max(upDp[i] + downDp[i], max);
+
+        System.out.println(max - 1);
+    }
 }
Index: BJ/BJ_1916/BJ_1916.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class BJ_1916 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BJ/BJ_1916/BJ_1916.java b/BJ/BJ_1916/BJ_1916.java
--- a/BJ/BJ_1916/BJ_1916.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/BJ/BJ_1916/BJ_1916.java	(date 1651826677833)
@@ -1,2 +1,77 @@
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.PriorityQueue;
+import java.util.StringTokenizer;
+
+class BJ_1916_Node implements Comparable<BJ_1916_Node> {
+    int dest, cost;
+
+    BJ_1916_Node(int dest, int cost) {
+        this.dest = dest;
+        this.cost = cost;
+    }
+
+    @Override
+    public int compareTo(BJ_1916_Node o) {
+        return cost - o.cost;
+    }
+}
+
 public class BJ_1916 {
+    public static ArrayList<ArrayList<BJ_1916_Node>> graph;
+    public static int[] dist;
+
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+        int M = Integer.parseInt(br.readLine());
+
+        graph = new ArrayList<>();
+        for (int i = 0; i < N + 1; i++)
+            graph.add(new ArrayList<>());
+
+        for (int i = 0; i < M; i++) {
+            StringTokenizer st = new StringTokenizer(br.readLine());
+
+            int startNum = Integer.parseInt(st.nextToken());
+            int distNum = Integer.parseInt(st.nextToken());
+            int distCost = Integer.parseInt(st.nextToken());
+
+            graph.get(startNum).add(new BJ_1916_Node(distNum, distCost));
+        }
+
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int start = Integer.parseInt(st.nextToken());
+        int end = Integer.parseInt(st.nextToken());
+        dist = new int[N + 1];
+
+        for (int i = 0; i < N + 1; i++)
+            dist[i] = Integer.MAX_VALUE;
+        dist[start] = 0;
+
+        dijkstra(start);
+
+        System.out.print(dist[end]);
+    }
+
+    public static void dijkstra(int start) {
+        PriorityQueue<BJ_1916_Node> queue = new PriorityQueue<>();
+        queue.add(new BJ_1916_Node(start, 0));
+
+        while (!queue.isEmpty()) {
+            BJ_1916_Node now = queue.poll();
+
+            if (now.cost > dist[now.dest]) continue;
+            int len = graph.get(now.dest).size();
+            for (int i = 0; i < len; i++) {
+                BJ_1916_Node next = graph.get(now.dest).get(i);
+                if (dist[next.dest] > now.cost + next.cost) {
+                    dist[next.dest] = now.cost + next.cost;
+                    queue.add(new BJ_1916_Node(next.dest, dist[next.dest]));
+                }
+            }
+        }
+    }
 }
Index: Inflearn/inflearn_6-6/inf_06_6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\npublic class Main {\n\tpublic List<Integer> solution(int num, int[] arr) {\n\t\tList<Integer> answer = new ArrayList<>();\n\t\t// Arrays.copyOf(복제할 배열, 복제할 크기);\n//\t\tint[] tmp = Arrays.copyOf(arr, num);\n\t\t// 복제할 배열.clone() -> 배열을 복제해서 새로 배열을 생성\n\t\t// arr과 tmp는 서로 다른 메모리를 가르키므로 arr.equals(tmp) = false가 나옴.\n\t\tint[] tmp = arr.clone();\n\t\tArrays.sort(tmp);\n\n\t\tfor (int i = 0 ; i < num ; i++) {\n\t\t\tif (arr[i] != tmp[i]) {\n\t\t\t\tanswer.add(i+1);\n\t\t\t}\n\t\t}\t\t\n\n\t\treturn answer;\n\t}\n\n\tpublic static void main(String[] argc) {\n\t\tMain main = new Main();\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint num = scan.nextInt();\n\t\tint[] arr = new int[num];\n\n\t\tfor (int i = 0 ; i < num ; i++)\n\t\t\tarr[i] = scan.nextInt();\n\n\t\tfor (int result : main.solution(num, arr))\n\t\t\tSystem.out.print(result + \" \");\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_6-6/inf_06_6.java b/Inflearn/inflearn_6-6/inf_06_6.java
--- a/Inflearn/inflearn_6-6/inf_06_6.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_6-6/inf_06_6.java	(date 1652701585922)
@@ -1,6 +1,6 @@
 import java.util.*;
 
-public class Main {
+public class inf_06_6 {
 	public List<Integer> solution(int num, int[] arr) {
 		List<Integer> answer = new ArrayList<>();
 		// Arrays.copyOf(복제할 배열, 복제할 크기);
@@ -20,7 +20,7 @@
 	}
 
 	public static void main(String[] argc) {
-		Main main = new Main();
+		inf_06_6 inf066 = new inf_06_6();
 		Scanner scan = new Scanner(System.in);
 
 		int num = scan.nextInt();
@@ -29,7 +29,7 @@
 		for (int i = 0 ; i < num ; i++)
 			arr[i] = scan.nextInt();
 
-		for (int result : main.solution(num, arr))
+		for (int result : inf066.solution(num, arr))
 			System.out.print(result + " ");
 	}
 }
Index: Inflearn/inflearn_7-2/inf_07_02.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_02 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-2/inf_07_02.java b/Inflearn/inflearn_7-2/inf_07_02.java
--- a/Inflearn/inflearn_7-2/inf_07_02.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-2/inf_07_02.java	(date 1652800146867)
@@ -1,2 +1,26 @@
-package PACKAGE_NAME;public class inf_07_02 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class inf_07_02 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        System.out.print(solution(N));
+    }
+
+    public static String solution(int N) {
+        String answer = "";
+
+        answer = recursive(N, answer);
+        StringBuilder sb = new StringBuilder(answer);
+
+        return sb.reverse().toString();
+    }
+
+    public static String recursive(int N, String str) {
+        if (N == 0) return str;
+        return recursive(N / 2, str + (N % 2));
+    }
 }
Index: Inflearn/inflearn_7-3/inf_07_03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_07_03 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_7-3/inf_07_03.java b/Inflearn/inflearn_7-3/inf_07_03.java
--- a/Inflearn/inflearn_7-3/inf_07_03.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_7-3/inf_07_03.java	(date 1652800528835)
@@ -1,2 +1,23 @@
-package PACKAGE_NAME;public class inf_07_03 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public class inf_07_03 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        int N = Integer.parseInt(br.readLine());
+
+        System.out.print(solution(N));
+    }
+
+    public static int solution(int N) {
+        int answer = 0;
+        answer = recursive(N, 1);
+        return answer;
+    }
+
+    public static int recursive(int N, int result) {
+        if (N == 0) return result;
+        return recursive(N - 1, result * N);
+    }
 }
Index: Inflearn/inflearn_2-12/inf_02_12.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PACKAGE_NAME;public class inf_02_12 {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Inflearn/inflearn_2-12/inf_02_12.java b/Inflearn/inflearn_2-12/inf_02_12.java
--- a/Inflearn/inflearn_2-12/inf_02_12.java	(revision e902c6605312d63dbfc7f5bb03e874d02b3aa71a)
+++ b/Inflearn/inflearn_2-12/inf_02_12.java	(date 1652963520840)
@@ -1,2 +1,28 @@
-package PACKAGE_NAME;public class inf_02_12 {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.StringTokenizer;
+
+public class inf_02_12 {
+    public static void main(String[] args) throws IOException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+        StringTokenizer st = new StringTokenizer(br.readLine());
+        int N = Integer.parseInt(st.nextToken());
+        int M = Integer.parseInt(st.nextToken());
+        int[][] map = new int[M][N];
+        for (int i = 0; i < M; i++) {
+            st = new StringTokenizer(br.readLine());
+            for (int j = 0; j < N; j++)
+                map[i][j] = Integer.parseInt(st.nextToken());
+        }
+
+        System.out.print(solution(N, M, map));
+    }
+
+    public static int solution(int N, int M, int[][] map) {
+        int answer = 0;
+
+
+        return answer;
+    }
 }
